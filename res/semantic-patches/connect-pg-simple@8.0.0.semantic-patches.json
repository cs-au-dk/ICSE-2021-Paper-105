[
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "read <connect-pg-simple>().tableName",
      "unknownAccessPathQuestion": "Is this reading a private method on an instance of the pgStore?"
    },
    "semanticPatchId": "2234",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2234",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-11-25T06:33:49.000Z",
      "detectionPattern": "read <connect-pg-simple>()().tableName",
      "unknownAccessPathQuestion": "Is this reading a private method on an instance of the pgStore?"
    },
    "semanticPatchId": "2234",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <connect-pg-simple>()().getPruneDelay",
      "suggestedFixDescription": "The `getPruneDelay()` method is no longer available on the pgStore object.\nYou can simulate the getPruneDelay method yourselves:\n(1) If you are creating the pgStore object ($base) with the `pruneSessionInterval` option but NOT with the `pruneSessionRandomizedInterval` option:\nThe getPruneDelay would in this case simply return the `pruneSessionInterval` value, hence just save this value in a variable when making the pgStore object.\n(2) If you are creating the pgStore object with both the `pruneSessionInterval` option and the `pruneSessionRandomizedInterval` option:\nIn this case getPruneDelay would simply parse the `pruneSessionInterval` value to the `pruneSessionRandomizedInterval` method, hence you can save these in variables when making the pgStore object and then calling the method with the `pruneSessionInterval` value as the argument instead of calling `getPruneDelay()`",
      "unknownAccessPathQuestion": "Is this a call of the getPruneDelay method on a pgStore object?"
    },
    "semanticPatchId": "2235",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2235",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-11-25T07:10:45.000Z",
      "detectionPattern": "call <connect-pg-simple>()().getPruneDelay base:pgStore",
      "suggestedFixDescription": "The `getPruneDelay()` method is no longer available on the pgStore object.\nYou can simulate the getPruneDelay method yourselves:\n(1) If you are creating the pgStore object ($base) with the `pruneSessionInterval` option but NOT with the `pruneSessionRandomizedInterval` option:\nThe getPruneDelay would in this case simply return the `pruneSessionInterval` value, hence just save this value in a variable when making the pgStore object.\n(2) If you are creating the pgStore object with both the `pruneSessionInterval` option and the `pruneSessionRandomizedInterval` option:\nIn this case getPruneDelay would simply parse the `pruneSessionInterval` value to the `pruneSessionRandomizedInterval` method, hence you can save these in variables when making the pgStore object and then calling the method with the `pruneSessionInterval` value as the argument instead of calling `getPruneDelay()`",
      "unknownAccessPathQuestion": "Is this a call of the getPruneDelay method on a pgStore object?"
    },
    "semanticPatchId": "2235",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "(() => {\n    let expire; \n    \n    if (sess && sess.cookie && sess.cookie['expires']) {\n        const expireDate = new Date(sess.cookie['expires']);\n        expire = Math.ceil(expireDate.valueOf() / 1000);\n    } else {\n        const ONE_DAY = 86400;\n        const ttl = $base.ttl || ONE_DAY;\n        expire = Math.ceil(Date.now() / 1000 + ttl);\n    }\n\n    return expire\n})()",
        "replacements": []
      },
      "detectionPattern": "call <connect-pg-simple>()()._getExpireTime base:pgStore",
      "unknownAccessPathQuestion": "Is this a call of the _getExpireTime method on a pgStore object?"
    },
    "semanticPatchId": "2236",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "2234",
      "comment": "Initial",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-11-25T06:33:55.000Z",
      "detectionPattern": "read <connect-pg-simple>()().tableName",
      "suggestedFixDescription": "$prop is no longer a public property on the pgStore object. \nAfter the property was declared in the constructor it was never meant to be accessible, and has been marked as “private access” in the documentation, but without actually being private. \nIf you have a need to reference the value of one of the properties you should be able to declare a variable when the pgStore object is declared, holding this value.",
      "unknownAccessPathQuestion": "Is this reading a private method on an instance of the pgStore?"
    },
    "semanticPatchId": "2234",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "2235",
      "comment": "minors in suggested fix",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-11-25T07:10:58.000Z",
      "detectionPattern": "call <connect-pg-simple>()().getPruneDelay base:pgStore",
      "suggestedFixDescription": "The `getPruneDelay()` method is no longer available on the pgStore object.\nYou can simulate the getPruneDelay method:\n(1) If you are creating the pgStore object ($base) with the `pruneSessionInterval` option but NOT with the `pruneSessionRandomizedInterval` option:\nThe getPruneDelay would in this case simply return the `pruneSessionInterval` value, hence just save this value in a variable when making the pgStore object.\n(2) If you are creating the pgStore object with both the `pruneSessionInterval` option and the `pruneSessionRandomizedInterval` option:\nIn this case getPruneDelay would simply pass the `pruneSessionInterval` value to the `pruneSessionRandomizedInterval` method, hence you can store this value in a variable when making the pgStore object and then calling the method with the `pruneSessionInterval` value as the argument instead of calling `getPruneDelay()`",
      "unknownAccessPathQuestion": "Is this a call of the getPruneDelay method on a pgStore object?"
    },
    "semanticPatchId": "2235",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "minors in suggested fix"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "2234",
      "comment": "minors in suggested fix",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-11-25T07:15:56.000Z",
      "detectionPattern": "read <connect-pg-simple>()().tableName",
      "suggestedFixDescription": "$prop is no longer a public property on the pgStore object. \nAfter the property was declared in the constructor it was never meant to be accessible, and has been marked as “private access” in the documentation, but without actually being private. \nIf you have a need to reference the value of one of the properties you should store a reference in a variable when the pgStore object is created.",
      "unknownAccessPathQuestion": "Is this reading a private method on an instance of the pgStore?"
    },
    "semanticPatchId": "2234",
    "breakingChangeId": "811",
    "enabled": true,
    "comment": "minors in suggested fix"
  }
]