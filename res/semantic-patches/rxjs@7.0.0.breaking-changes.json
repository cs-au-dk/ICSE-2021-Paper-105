[
  {
    "id": "218",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "onUnhandledError: Errors that occur during setup of an observable subscription, after the subscription has emitted an error, or completed will now throw in their own call stack. Before it would call console.warn. This is potentially breaking in edge cases for node applications, which may be configured to terminate for unhandled exceptions. In the unlikely event this affects you, you can configure the behavior to console.warn in the new configuration setting like so: import { config } from 'rxjs'; config.onUnhandledError = (err) => console.warn(err);",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "214",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "TS: RxJS requires TS 4.2",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "215",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "toPromise: toPromise return type now returns T | undefined in TypeScript, which is correct, but may break builds.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "216",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Subscription: add no longer returns an unnecessary Subscription reference. This was done to prevent confusion caused by a legacy behavior. You can now add and remove functions and Subscriptions as teardowns to and from a Subscription using add and remove directly. Before this, remove only accepted subscriptions.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "217",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Subscriber: new Subscriber no longer takes 0-3 arguments. To create a Subscriber with 0-3 arguments, use Subscriber.create. However, please note that there is little to no reason that you should be creating Subscriber references directly, and Subscriber.create and new Subscriber are both deprecated.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "219",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "RxJS Error types Tests that are written with naive expectations against errors may fail now that errors have a proper stack property. In some testing frameworks, a deep equality check on two error instances will check the values in stack, which could be different.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "220",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Leaked implementation detail _unsubscribeAndRecycle of Subscriber has been removed. Just use new Subscription objects",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "223",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "ReplaySubject no longer schedules emissions when a scheduler is provided. If you need that behavior, please compose in observeOn using pipe, for example: new ReplaySubject(2, 3000).pipe(observeOn(asap))",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "224",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "rxjs-compat: rxjs/Rx is no longer a valid import site.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "245",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Calling .next on a Subject without passing a value is no longer allowed",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "221",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "The static sortActions method on VirtualTimeScheduler is no longer publicly exposed by our TS types.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "222",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Notification.createNext(undefined) will no longer return the exact same reference everytime.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "226",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "race: race() will no longer subscribe to subsequent observables if a provided source synchronously errors or completes. This means side effects that might have occurred during subscription in those rare cases will no longer occur.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "227",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "unsubscribe no longer available via the this context of observer functions. To reenable, set config.useDeprecatedNextContext = true on the rxjs config found at import { config } from 'rxjs';. Note that enabling this will result in a performance penalty for all consumer subscriptions.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "228",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "defer no longer allows factories to return void or undefined. All factories passed to defer must return a proper ObservableInput, such as Observable, Promise, et al. To get the same behavior as you may have relied on previously, return EMPTY or return of() from the factory.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "229",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "map: thisArg will now default to undefined. The previous default of MapSubscriber never made any sense. This will only affect code that calls map with a function and references this like so: source.pipe(map(function () { console.log(this); })). There wasn't anything useful about doing this, so the breakage is expected to be very minimal. If anything we're no longer leaking an implementation detail.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "230",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "mergeScan: mergeScan will no longer emit its inner state again upon completion.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "234",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "single operator will now throw for scenarios where values coming in are either not present, or do not match the provided predicate. Error types thrown have also been updated, please check documentation for changes.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "232",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "An undocumented behavior where passing a negative count argument to repeat would result in an observable that repeats forever.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "233",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "Removed an undocumented behavior where passing a negative count argument to retry would result in an observable that repeats forever.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "235",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "skipLast: skipLast will no longer error when passed a negative number, rather it will simply return the source, as though 0 was passed.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "236",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "take and will now throw runtime error for arguments that are negative or NaN, this includes non-TS calls like take().",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "237",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "takeLast now has runtime assertions that throw TypeErrors for invalid arguments. Calling takeLast without arguments or with an argument that is NaN will throw a TypeError",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "238",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "throwError: In an extreme corner case for usage, throwError is no longer able to emit a function as an error directly. If you need to push a function as an error, you will have to use the factory function to return the function like so: throwError(() => functionToEmit), in other words throwError(() => () => console.log('called later')).",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "239",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "zip: zip operators will no longer iterate provided iterables \"as needed\", instead the iterables will be treated as push-streams just like they would be everywhere else in RxJS. This means that passing an endless iterable will result in the thread locking up, as it will endlessly try to read from that iterable. This puts us in-line with all other Rx implementations. To work around this, it is probably best to use map or some combination of map and zip. For example, zip(source$, iterator) could be source$.pipe(map(value => [value, iterator.next().value])).",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "240",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "zip: Zipping a single array will now have a different result. This is an extreme corner-case, because it is very unlikely that anyone would want to zip an array with nothing at all. The workaround would be to wrap the array in another array zip([[1,2,3]]). But again, that's pretty weird.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "241",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "ajax body serialization will now use default XHR behavior in all cases. If the body is a Blob, ArrayBuffer, any array buffer view (like a byte sequence, e.g. Uint8Array, etc), FormData, URLSearchParams, string, or ReadableStream, default handling is use. If the body is otherwise typeof \"object\", then it will be converted to JSON via JSON.stringify, and the Content-Type header will be set to application/json;charset=utf-8. All other types will emit an error.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "242",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "The Content-Type header passed to ajax configuration no longer has any effect on the serialization behavior of the AJAX request.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "243",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "ajax: In an extreme corner-case... If an error occurs, the responseType is \"json\", we're in IE, and the responseType is not valid JSON, the ajax observable will no longer emit a syntax error, rather it will emit a full AjaxError with more details.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "244",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "ajax: Ajax implementation drops support for IE10 and lower. This puts us in-line with other implementations and helps clean up code in this area",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "246",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "some internal modules are no longer exported (not described in changelog)",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "231",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "pairs: pairs will no longer function in IE without a polyfill for Object.entries. pairs itself is also deprecated in favor of users just using from(Object.entries(obj)).",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "225",
    "packageVersion": "7.0.0",
    "packageName": "rxjs",
    "description": "count: No longer passes source observable as a third argument to the predicate. \nThat feature was rarely used, and of limited value. \nThe workaround is to simply close over the source inside of the function if you need to access it in there.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  }
]