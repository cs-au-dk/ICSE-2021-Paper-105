[
  {
    "id": "294",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Mongoose now requires Node.js >= 12.0.0",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "328",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "useNewUrlParser, useUnifiedTopology, useFindAndModify, and useCreateIndex are no longer supported options. Mongoose 6 always behaves as if useNewUrlParser, useUnifiedTopology, and useCreateIndex are true, and useFindAndModify is false. Please remove these options from your code.\n// No longer necessary:\nmongoose.set('useFindAndModify', false);\n\nawait mongoose.connect('mongodb://localhost:27017/test', {\n  useNewUrlParser: true, // <-- no longer necessary\n  useUnifiedTopology: true // <-- no longer necessary\n});",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "324",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "MongoDB Driver 4.x is written in TypeScript and has its own TypeScript type definitions. These may conflict with @types/mongodb, so if you have TypeScript compiler errors please make sure you upgrade to the latest version of @types/mongodb, which is an empty stub.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "325",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "The poolSize option for connections has been replaced with minPoolSize and maxPoolSize. The Mongoose 5.x poolSize option is equivalent to the Mongoose 6 maxPoolSize option. The default value of maxPoolSize has been increased to 100.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "326",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "The result of updateOne() and updateMany() is now different.\nlet res = await TestModel.updateMany({}, { someProperty: 'someValue' });\n\nres.matchedCount; // Number of documents that were found that match the filter. Replaces `res.n`\nres.modifiedCount; // Number of documents modified. Replaces `res.nModified`\nres.upsertedCount; // Number of documents upserted. Replaces `res.upserted`",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "327",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "The result of deleteOne() and deleteMany() no longer has an n property.\nlet res = await TestModel.deleteMany({});\n\n// In Mongoose 6: `{ acknowledged: true, deletedCount: 2 }`\n// In Mongoose 5: `{ n: 2, ok: 1, deletedCount: 2 }`\nres;\n\nres.deletedCount; // Number of documents that were deleted. Replaces `res.n`",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "339",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Mongoose connections are no longer thenable. This means that await mongoose.createConnection(uri) no longer waits for Mongoose to connect. Use mongoose.createConnection(uri).asPromise() instead. See #8810.\n// The below no longer works in Mongoose 6\nawait mongoose.createConnection(uri);\n\n// Do this instead\nawait mongoose.createConnection(uri).asPromise();",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "341",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`mongoose.connect()` Returns a Promise\nThe mongoose.connect() function now always returns a promise, not a Mongoose instance.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "344",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Clone Discriminator Schemas By Default\nMongoose now clones discriminator schemas by default. This means you need to pass { clone: false } to discriminator() if you're using recursive embedded discriminators.\n// In Mongoose 6, these two are equivalent:\nUser.discriminator('author', authorSchema);\nUser.discriminator('author', authorSchema.clone());\n\n// To opt out if `clone()` is causing issues, pass `clone: false`\nUser.discriminator('author', authorSchema, { clone: false });",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "345",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Simplified isValidObjectId() and separate isObjectIdOrHexString()\nIn Mongoose 5, mongoose.isValidObjectId() returned false for values like numbers, which was inconsistent with the MongoDB driver's ObjectId.isValid() function. Technically, any JavaScript number can be converted to a MongoDB ObjectId.\nIn Mongoose 6, mongoose.isValidObjectId() is just a wrapper for mongoose.Types.ObjectId.isValid() for consistency.\nMongoose 6.2.5 now includes a mongoose.isObjectIdOrHexString() function, which does a better job of capturing the more common use case for isValidObjectId(): is the given value an ObjectId instance or a 24 character hex string representing an ObjectId?\n// `isValidObjectId()` returns `true` for some surprising values, because these\n// values are _technically_ ObjectId representations\nmongoose.isValidObjectId(new mongoose.Types.ObjectId()); // true\nmongoose.isValidObjectId('0123456789ab'); // true\nmongoose.isValidObjectId(6); // true\nmongoose.isValidObjectId(new User({ name: 'test' })); // true\n\n// `isObjectIdOrHexString()` instead only returns `true` for ObjectIds and 24\n// character hex strings.\nmongoose.isObjectIdOrHexString(new mongoose.Types.ObjectId()); // true\nmongoose.isObjectIdOrHexString('62261a65d66c6be0a63c051f'); // true\nmongoose.isValidObjectId('0123456789ab'); // false\nmongoose.isValidObjectId(6); // false",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "346",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`strictPopulate()`\nMongoose now throws an error if you populate() a path that isn't defined in your schema. This is only for cases when we can infer the local schema, like when you use Query#populate(), not when you call Model.populate() on a POJO. See gh-5124.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "347",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Single nested subdocs have been renamed to \"subdocument paths\". So SchemaSingleNestedOptions is now SchemaSubdocumentOptions and mongoose.Schema.Types.Embedded is now mongoose.Schema.Types.Subdocument. See gh-10419",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "348",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Aggregate#cursor() now returns an AggregationCursor instance to be consistent with Query#cursor(). You no longer need to do Model.aggregate(pipeline).cursor().exec() to get an aggregation cursor, just Model.aggregate(pipeline).cursor().",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "349",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "No More `context: 'query'`\nThe context option for queries has been removed. Now Mongoose always uses context = 'query'.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "350",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Removed `safe`\nsafe is no longer an option for schemas, queries, or save(). Use writeConcern instead.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "351",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "useNewUrlParser, useUnifiedTopology, useFindAndModify, and useCreateIndex are no longer supported options. Mongoose 6 always behaves as if useNewUrlParser, useUnifiedTopology, and useCreateIndex are true, and useFindAndModify is false. Please remove these options from your code - JSFIX has removed the options in the code.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "352",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Model.exists(...) now returns a lean document instead of boolean\n// in Mongoose 5.x, `existingUser` used to be a boolean\n// now `existingUser` will be either `{ _id: ObjectId(...) }` or `null`.\nconst existingUser = await User.exists({ name: 'John' });\nif (existingUser) {\n  console.log(existingUser._id); \n}",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "353",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`strictQuery` is now equal to `strict` by default\nMongoose no longer supports a strictQuery option. You must now use strict. As of Mongoose 6.0.10, we brought back the strictQuery option. However, strictQuery is tied to strict by default. This means that, by default, Mongoose will filter out query filter properties that are not in the schema.\nconst userSchema = new Schema({ name: String });\nconst User = mongoose.model('User', userSchema);\n\n// By default, this is equivalent to `User.find()` because Mongoose filters out `notInSchema`\nawait User.find({ notInSchema: 1 });\n\n// Set `strictQuery: false` to opt in to filtering by properties that aren't in the schema\nawait User.find({ notInSchema: 1 }, null, { strictQuery: false });\n// equivalent:\nawait User.find({ notInSchema: 1 }).setOptions({ strictQuery: false });\n\nYou can also disable strictQuery globally to override:\nmongoose.set('strictQuery', false);",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "354",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "MongoError is now MongoServerError\nIn MongoDB Node.js Driver v4.x, 'MongoError' is now 'MongoServerError'. Please change any code that depends on the hardcoded string 'MongoError'.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "355",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Schema Defined Document Key Order\nMongoose now saves objects with keys in the order the keys are specified in the schema, not in the user-defined object. So whether Object.keys(new User({ name: String, email: String }).toObject() is ['name', 'email'] or ['email', 'name'] depends on the order name and email are defined in your schema.\nconst schema = new Schema({\n  profile: {\n    name: {\n      first: String,\n      last: String\n    }\n  }\n});\nconst Test = db.model('Test', schema);\n\nconst doc = new Test({\n  profile: { name: { last: 'Musashi', first: 'Miyamoto' } }\n});\n\n// Note that 'first' comes before 'last', even though the argument to `new Test()` flips the key order.\n// Mongoose uses the schema's key order, not the provided objects' key order.\nassert.deepEqual(Object.keys(doc.toObject().profile.name), ['first', 'last']);",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "356",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Removed `omitUndefined`: Mongoose now removes `undefined` keys in updates instead of setting them to `null`\nIn Mongoose 5.x, setting a key to undefined in an update operation was equivalent to setting it to null.\nlet res = await Test.findOneAndUpdate({}, { $set: { name: undefined } }, { new: true });\n\nres.name; // `null` in Mongoose 5.x\n\n// Equivalent to `findOneAndUpdate({}, {}, { new: true })` because `omitUndefined` will\n// remove `name: undefined`\nres = await Test.findOneAndUpdate({}, { $set: { name: undefined } }, { new: true, omitUndefined: true });\n\nMongoose 5.x supported an omitUndefined option to strip out undefined keys. In Mongoose 6.x, the omitUndefined option has been removed, and Mongoose will always strip out undefined keys.\n// In Mongoose 6, equivalent to `findOneAndUpdate({}, {}, { new: true })` because Mongoose will\n// remove `name: undefined`\nconst res = await Test.findOneAndUpdate({}, { $set: { name: undefined } }, { new: true });\n\nThe only workaround is to explicitly set properties to null in your updates:\nconst res = await Test.findOneAndUpdate({}, { $set: { name: null } }, { new: true });",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "357",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Document Parameter to Default Functions\nMongoose now passes the document as the first parameter to default functions, which is helpful for using arrow functions with defaults.\nThis may affect you if you pass a function that expects different parameters to default, like default: mongoose.Types.ObjectId. See gh-9633. If you're passing a default function that does not utilize the document, change default: myFunction to default: () => myFunction() to avoid accidentally passing parameters that potentially change the behavior.\nconst schema = new Schema({\n  name: String,\n  age: Number,\n  canVote: {\n    type: Boolean,\n    // Default functions now receive a `doc` parameter, helpful for arrow functions\n    default: doc => doc.age >= 18\n  }\n});",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "358",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`typePojoToMixed`\nSchema paths declared with type: { name: String } become single nested subdocs in Mongoose 6, as opposed to Mixed in Mongoose 5. This removes the need for the typePojoToMixed option. See gh-7181.\n// In Mongoose 6, the below makes `foo` into a subdocument with a `name` property.\n// In Mongoose 5, the below would make `foo` a `Mixed` type, _unless_ you set `typePojoToMixed: true`.\nconst schema = new Schema({\n  foo: { type: { name: String } }\n});",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "359",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`autoCreate` Defaults to `true`\nautoCreate is true by default unless readPreference is secondary or secondaryPreferred, which means Mongoose will attempt to create every model's underlying collection before creating indexes. If readPreference is secondary or secondaryPreferred, Mongoose will default to false for both autoCreate and autoIndex because both createCollection() and createIndex() will fail when connected to a secondary.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "360",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Custom Validators with Populated Paths\nMongoose 6 always calls validators with depopulated paths (that is, with the id rather than the document itself). In Mongoose 5, Mongoose would call validators with the populated doc if the path was populated. See #8042",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": true,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "361",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Disconnected Event with Replica Sets\nWhen connected to a replica set, connections now emit 'disconnected' when connection to the primary is lost. In Mongoose 5, connections only emitted 'disconnected' when losing connection to all members of the replica set.\nHowever, Mongoose 6 does not buffer commands while a connection is disconnected. So you can still successfully execute commands like queries with readPreference = 'secondary', even if the Mongoose connection is in the disconnected state.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "362",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Removed `execPopulate()`\nDocument#populate() now returns a promise and is now no longer chainable.\nReplace await doc.populate('path1').populate('path2').execPopulate(); with await doc.populate(['path1', 'path2']);\nReplace await doc.populate('path1', 'select1').populate('path2', 'select2').execPopulate(); with\nawait doc.populate([{path: 'path1', select: 'select1'}, {path: 'path2', select: 'select2'}]);",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "363",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Removed Nested Path Merging\ndoc.set({ child: { age: 21 } }) now works the same whether child is a nested path or a subdocument: Mongoose will overwrite the value of child. In Mongoose 5, this operation would merge child if child was a nested path.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "364",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Removed Validator `isAsync`\nisAsync is no longer an option for validate. Use an async function instead.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "367",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Subdocument `ref` Function Context\nWhen populating a subdocument with a function ref or refPath, this is now the subdocument being populated, not the top-level document. See #8469.\nconst schema = new Schema({\n  works: [{\n    modelId: String,\n    data: {\n      type: mongoose.ObjectId,\n      ref: function(doc) {\n        // In Mongoose 6, `doc` is the array element, so you can access `modelId`.\n        // In Mongoose 5, `doc` was the top-level document.\n        return doc.modelId;\n      }\n    }\n  }]\n});",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "368",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`create()` with Empty Array\nawait Model.create([]) in v6.0 returns an empty array when provided an empty array, in v5.0 it used to return undefined. If any of your code is checking whether the output is undefined or not, you need to modify it with the assumption that await Model.create(...) will always return an array if provided an array.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "370",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "SchemaType `set` parameters\nMongoose now calls setter functions with priorValue as the 2nd parameter, rather than schemaType in Mongoose 5.\nconst userSchema = new Schema({\n  name: {\n    type: String,\n    trimStart: true,\n    set: trimStartSetter\n  }\n});\n\n// in v5.x the parameters were (value, schemaType), in v6.x the parameters are (value, priorValue, schemaType).\nfunction trimStartSetter(val, priorValue, schemaType) {\n  if (schemaType.options.trimStart && typeof val === 'string') {\n    return val.trimStart();\n  }\n  return val;\n}\n\nconst User = mongoose.model('User', userSchema);\n\nconst user = new User({ name: 'Robert Martin' });\nconsole.log(user.name); // 'robert martin'",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "371",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "`toObject()` and `toJSON()` Use Nested Schema `minimize`\nThis change was technically released with 5.10.5, but caused issues for users migrating from 5.9.x to 6.x. In Mongoose < 5.10.5, toObject() and toJSON() would use the top-level schema's minimize option by default.\nconst child = new Schema({ thing: Schema.Types.Mixed });\nconst parent = new Schema({ child }, { minimize: false });\nconst Parent = model('Parent', parent);\nconst p = new Parent({ child: { thing: {} } });\n\n// In v5.10.4, would contain `child.thing` because `toObject()` uses `parent` schema's `minimize` option\n// In `>= 5.10.5`, `child.thing` is omitted because `child` schema has `minimize: true`\nconsole.log(p.toObject());\n\nAs a workaround, you can either explicitly pass minimize to toObject() or toJSON():\nconsole.log(p.toObject({ minimize: false }));\n\nOr define the child schema inline (Mongoose 6 only) to inherit the parent's minimize option.\nconst parent = new Schema({\n  // Implicitly creates a new schema with the top-level schema's `minimize` option.\n  child: { type: { thing: Schema.Types.Mixed } }\n}, { minimize: false });",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": true,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "372",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Types.ObjectId is now a class, which means you can no longer omit new when creating a new ObjectId using new mongoose.Types.ObjectId(). Currently, you can still omit new in JavaScript, but you must put new in TypeScript.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "369",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Immutable `createdAt`\nIf you set timestamps: true, Mongoose will now make the createdAt property immutable. See gh-10139",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "343",
    "packageVersion": "6.0.0",
    "packageName": "mongoose",
    "description": "Duplicate Query Execution\nMongoose no longer allows executing the same query object twice. If you do, you'll get a Query was already executed error. Executing the same query instance twice is typically indicative of mixing callbacks and promises, but if you need to execute the same query twice, you can call Query#clone() to clone the query and re-execute it. See gh-7398\n// Results in 'Query was already executed' error, because technically this `find()` query executes twice.\nawait Model.find({}, function(err, result) {});\n\nconst q = Model.find();\nawait q;\nawait q.clone(); // Can `clone()` the query to allow executing the query again",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  }
]