[
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.bandwidth()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBand",
      "unknownAccessPathQuestion": "is this a call of the scale.ordinal().rangeBand method from the d3 package?"
    },
    "semanticPatchId": "1846",
    "breakingChangeId": "691",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1717",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-29T05:21:53.000Z",
      "primaryTemplate": {
        "pattern": " ($callee($1), $-1)",
        "replacements": []
      },
      "detectionPattern": "callR <d3>.{map,set}()**.{add,set}",
      "unknownAccessPathQuestion": "Is this call of either the `map().set` og `set().add` method from the d3 package?"
    },
    "semanticPatchId": "1717",
    "breakingChangeId": "603",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1717",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-09-29T05:24:46.000Z",
      "primaryTemplate": {
        "pattern": " ($callee($args), $-1)",
        "replacements": []
      },
      "detectionPattern": "callR <d3>.{map,set}()**.{add,set}",
      "unknownAccessPathQuestion": "Is this call of either the `map().set` og `set().add` method from the d3 package?"
    },
    "semanticPatchId": "1717",
    "breakingChangeId": "603",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.range [2,2]",
      "suggestedFixDescription": "This might change the result of $callee if $3 is a floating point number. The unexpected behavior is due to IEEE 754 double-precision floating point, which defines 0.2 * 3 = 0.6000000000000001. If this change has a negative effect on your software we recommend using the [d3-format](https://github.com/d3/d3-format) package to get your previous behavior back.",
      "unknownAccessPathQuestion": "Is this a call of the range method from the d3 package?"
    },
    "semanticPatchId": "1698",
    "breakingChangeId": "585",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.object($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.nest()**.map [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the nest().map method from the d3 package?"
    },
    "semanticPatchId": "1718",
    "breakingChangeId": "604",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1698",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-26T05:48:30.000Z",
      "detectionPattern": "call <d3>.range [3,3]",
      "suggestedFixDescription": "This might change the result of $callee if $3 is a floating point number. The unexpected behavior is due to IEEE 754 double-precision floating point, which defines 0.2 * 3 = 0.6000000000000001. If this change has a negative effect on your software we recommend using the [d3-format](https://github.com/d3/d3-format) package to get your previous behavior back.",
      "unknownAccessPathQuestion": "Is this a call of the range method from the d3 package?"
    },
    "semanticPatchId": "1698",
    "breakingChangeId": "585",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.range",
      "suggestedFixDescription": "This is only breaking if $callee creates an infinite range, in which case the result is no longer an Error but is now the empty array. If you need the error to be thrown in the case of an infinite range, you can use an if-statement with a condition checking for an empty array and then throwing an error yourself.",
      "unknownAccessPathQuestion": "Is this a call of the range method from the d3 package?"
    },
    "semanticPatchId": "1699",
    "breakingChangeId": "586",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.domain($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram()**.range",
      "unknownAccessPathQuestion": "Is this a call of the histogram().range method from the d3 package?"
    },
    "semanticPatchId": "1700",
    "breakingChangeId": "587",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.thresholds($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram()**.bins",
      "unknownAccessPathQuestion": "Is this a call of the histogram().bins() method fromt he d3 package?"
    },
    "semanticPatchId": "1701",
    "breakingChangeId": "588",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.histogram",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram",
      "unknownAccessPathQuestion": "Is this a call of the histogram() method from the d3 package?"
    },
    "semanticPatchId": "1702",
    "breakingChangeId": "589",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1702",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-27T04:13:24.000Z",
      "primaryTemplate": {
        "pattern": "$base:$base.histogram",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram",
      "unknownAccessPathQuestion": "Is this a call of the histogram() method from the d3 package?"
    },
    "semanticPatchId": "1702",
    "breakingChangeId": "589",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1702",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-09-27T04:14:35.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.histogram",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram",
      "unknownAccessPathQuestion": "Is this a call of the histogram() method from the d3 package?"
    },
    "semanticPatchId": "1702",
    "breakingChangeId": "589",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1702",
      "comment": "Initial ",
      "version": 2,
      "creationDate": "2022-09-27T04:15:07.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.histogram($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.histogram",
      "unknownAccessPathQuestion": "Is this a call of the histogram() method from the d3 package?"
    },
    "semanticPatchId": "1702",
    "breakingChangeId": "589",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.innerTickSize($1); \n$base.outerTickSize($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis().tickSize [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the axis().tickSize method from the d3 package?"
    },
    "semanticPatchId": "1703",
    "breakingChangeId": "590",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1703",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-27T04:45:02.000Z",
      "primaryTemplate": {
        "pattern": "$base.innerTickSize($1); \n$base.outerTickSize($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.tickSize [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the axis().tickSize method from the d3 package?"
    },
    "semanticPatchId": "1703",
    "breakingChangeId": "590",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1703",
      "comment": "Initial, desired template: $base.innerTickSize($1); \n                                       $base.outerTickSize($2)",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-09-27T04:47:09.000Z",
      "primaryTemplate": {
        "pattern": "($base.innerTickSize($1), $base.outerTickSize($2))",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.tickSize [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the axis().tickSize method from the d3 package?"
    },
    "semanticPatchId": "1703",
    "breakingChangeId": "590",
    "enabled": true,
    "comment": "Initial, desired template: $base.innerTickSize($1); \n                                       $base.outerTickSize($2)"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1703",
      "comment": "Initial, desired template: $base.innerTickSize($1); \n                                       $base.outerTickSize($2) ",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-09-27T16:03:47.000Z",
      "primaryTemplate": {
        "pattern": "($base.innerTickSize($1), $base.outerTickSize($2))",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.tickSize",
      "unknownAccessPathQuestion": "Is this a call of the axis().tickSize method from the d3 package?"
    },
    "semanticPatchId": "1703",
    "breakingChangeId": "590",
    "enabled": true,
    "comment": "Initial, desired template: $base.innerTickSize($1); \n                                       $base.outerTickSize($2) "
  },
  {
    "version": 4,
    "semanticPatch": {
      "id": "1703",
      "comment": "Initial",
      "enabled": true,
      "version": 3,
      "creationDate": "2022-09-27T16:05:15.000Z",
      "primaryTemplate": {
        "pattern": "$base.innerTickSize($1).outerTickSize($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.tickSize  [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the axis().tickSize method from the d3 package?"
    },
    "semanticPatchId": "1703",
    "breakingChangeId": "590",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.tickSizeInner($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.innerTickSize",
      "unknownAccessPathQuestion": "Is this a call of the axis.innerTickSize method from the d3 package?"
    },
    "semanticPatchId": "1705",
    "breakingChangeId": "592",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.tickSizeOuter($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.axis()**.outerTickSize",
      "unknownAccessPathQuestion": "is this a call of the axis().outerTickSize method from the d3 package?"
    },
    "semanticPatchId": "1706",
    "breakingChangeId": "593",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.brush",
      "suggestedFixDescription": "$base:base.brush($args)",
      "unknownAccessPathQuestion": "Is this a constructor call of the svg.brush() from the d3 package?"
    },
    "semanticPatchId": "1707",
    "breakingChangeId": "594",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1707",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-27T16:44:35.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.brush($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.brush",
      "unknownAccessPathQuestion": "Is this a constructor call of the svg.brush() from the d3 package?"
    },
    "semanticPatchId": "1707",
    "breakingChangeId": "594",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.brush",
      "suggestedFixDescription": "If you are currently using `d3.scale` to declare the brush area or to define a selection the behavior of your brush might change. Instead of declaring these two things using `d3.scale` you should use [brush.extent](https://github.com/d3/d3-brush/blob/main/README.md#brush_extent) , which defaults to the entire area of the owner svg area. `brush.extent` is declared as an array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner and [x1, y1] is the bottom-right corner.",
      "unknownAccessPathQuestion": "Is this a call of the d3.svg.brush method from the d3 package?"
    },
    "semanticPatchId": "1708",
    "breakingChangeId": "595",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.brush().event",
      "suggestedFixDescription": "This method was removed because the [brush.on](https://github.com/d3/d3-brush/blob/main/README.md#brush_on) method has the same functionality. This means that to get access to the event information you are currently using you will have to add event listeners for these events using the `brush.on` method. E.g. to get an event to trigger when the brush event starts use something like `d3.brush().on(\"start\", _eventName)`.",
      "unknownAccessPathQuestion": "Is this a call of the brush().event method fromt he d3 package?"
    },
    "semanticPatchId": "1709",
    "breakingChangeId": "596",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.Chords",
      "primaryTemplate": {
        "pattern": "$callee[layout.chord => chord]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.chord",
      "unknownAccessPathQuestion": "Is this a call of the chord method from the d3 package?"
    },
    "semanticPatchId": "1710",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.Chords"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1710",
      "comment": "d3.Chords ",
      "version": 0,
      "creationDate": "2022-09-28T16:31:25.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.chord($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.chord",
      "unknownAccessPathQuestion": "Is this a call of the chord method from the d3 package?"
    },
    "semanticPatchId": "1710",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.Chords "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "svg.chord",
      "primaryTemplate": {
        "pattern": "$base:base.ribbon($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.chord",
      "unknownAccessPathQuestion": "Is this a call of the svg.chord method from the d3 package?"
    },
    "semanticPatchId": "1711",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "svg.chord"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.ribbon().padAngle",
        "replacements": []
      },
      "detectionPattern": "call <d3>**.chord.padding",
      "unknownAccessPathQuestion": "Is this a call of the chord.padding method from the d3 package?"
    },
    "semanticPatchId": "1712",
    "breakingChangeId": "598",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1712",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-28T16:48:22.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.ribbon().padAngle($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>**.chord().padding",
      "unknownAccessPathQuestion": "Is this a call of the chord.padding method from the d3 package?"
    },
    "semanticPatchId": "1712",
    "breakingChangeId": "598",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.map().forEach",
      "suggestedFixDescription": "To fix this change the signature of $1. Most modern IDE’s provide support for refactoring method signatures (in case you have other parts depending on this signature not changing). For an example of the new signature (it’s the same as the ES6 Maps.forEach) see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
      "unknownAccessPathQuestion": "Is this a call of the map().forEach method from the d3 package?"
    },
    "semanticPatchId": "1713",
    "breakingChangeId": "599",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.map().forEach",
      "suggestedFixDescription": "To fix this change the signature of $1. Most modern IDE’s provide support for refactoring method signatures (in case you have other parts depending on this signature not changing). For an example of the new signature (it’s the same as the ES6 Maps.forEach) see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
      "unknownAccessPathQuestion": "Is this a call of the map.forEach method from the d3 package?"
    },
    "semanticPatchId": "1714",
    "breakingChangeId": "600",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.set().forEach",
      "suggestedFixDescription": "To fix this change the signature of $1. Most modern IDE’s provide support for refactoring method signatures (in case you have other parts depending on this signature not changing). For an example of the new signature (it’s the same as the ES6 Set.forEach) see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",
      "unknownAccessPathQuestion": "Is this a call of the set.forEach method from the d3 package?"
    },
    "semanticPatchId": "1715",
    "breakingChangeId": "601",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1715",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-28T17:22:30.000Z",
      "detectionPattern": "call <d3>.set()**.forEach",
      "suggestedFixDescription": "To fix this change the signature of $1. Most modern IDE’s provide support for refactoring method signatures (in case you have other parts depending on this signature not changing). For an example of the new signature (it’s the same as the ES6 Set.forEach) see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",
      "unknownAccessPathQuestion": "Is this a call of the set.forEach method from the d3 package?"
    },
    "semanticPatchId": "1715",
    "breakingChangeId": "601",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1714",
      "comment": "** added to pattern since you are able to chain map calls(e.g. by using map.set(key, val)). See test for lists.",
      "version": 1,
      "creationDate": "2022-09-28T17:24:29.000Z",
      "detectionPattern": "call <d3>.map()**.forEach",
      "suggestedFixDescription": "To fix this change the signature of $1. Most modern IDE’s provide support for refactoring method signatures (in case you have other parts depending on this signature not changing). For an example of the new signature (it’s the same as the ES6 Maps.forEach) see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
      "unknownAccessPathQuestion": "Is this a call of the map.forEach method from the d3 package?"
    },
    "semanticPatchId": "1714",
    "breakingChangeId": "600",
    "enabled": true,
    "comment": "** added to pattern since you are able to chain map calls(e.g. by using map.set(key, val)). See test for lists."
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial (map)",
      "primaryTemplate": {
        "pattern": "$base.each($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{set(),map()}**.forEach",
      "unknownAccessPathQuestion": "Is this a call of the forEach method on either a map or set from the d3 package?"
    },
    "semanticPatchId": "1716",
    "breakingChangeId": "602",
    "enabled": true,
    "comment": "Initial (map)"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1716",
      "comment": "Initial (map) ",
      "version": 0,
      "creationDate": "2022-09-29T05:08:38.000Z",
      "primaryTemplate": {
        "pattern": "$base.each($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{map,set}()**.forEach",
      "unknownAccessPathQuestion": "Is this a call of the forEach method on either a map or set from the d3 package?"
    },
    "semanticPatchId": "1716",
    "breakingChangeId": "602",
    "enabled": true,
    "comment": "Initial (map) "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": " ($callee($1), $1)",
        "replacements": []
      },
      "detectionPattern": "callR <d3>.{map,set}()**.{add,set}",
      "unknownAccessPathQuestion": "Is this call of either the `map().set` og `set().add` method from the d3 package?"
    },
    "semanticPatchId": "1717",
    "breakingChangeId": "603",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.nest()**.rollup()**.entries",
      "suggestedFixDescription": "The rollup function now also applies to the `entry.value` of the leaf nodes returned by the nest.entries() method, like for the nest.map() method. There is no easy fix for this If you intend to use the .rollup() function for the leaf notes of .map() and not those of .entries(). If possible you can use the .entries() method before applying the rollup function. For the new documentation of .entries() see: https://github.com/d3/d3-collection/blob/master/README.md#nest_entries",
      "unknownAccessPathQuestion": "Is this the call of the nest.entries method from the d3 package?"
    },
    "semanticPatchId": "1719",
    "breakingChangeId": "605",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.color().toString",
      "suggestedFixDescription": "If you need the color in hexadecimal RGB format you can use the $base.rgb() to get the d3.rgb object of the color, on which you have access to each color as the `r`, `g` and `b` properties. Then you can use .r.toString(16) to get the hexadecimal representation of the red color.",
      "unknownAccessPathQuestion": "Is this a call of the color.toString method from the d3.package?"
    },
    "semanticPatchId": "1720",
    "breakingChangeId": "606",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.hsl($base.toString())",
        "replacements": []
      },
      "detectionPattern": "call <d3>.rgb().hsl",
      "unknownAccessPathQuestion": "Is this a call of the rgb.hsl method from the d3 package?"
    },
    "semanticPatchId": "1721",
    "breakingChangeId": "607",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1721",
      "comment": "Initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-09-29T15:50:08.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.hsl($base.toString())",
        "replacements": []
      },
      "detectionPattern": "call <d3>.rgb().hsl",
      "unknownAccessPathQuestion": "Is this a call of the rgb.hsl method from the d3 package?"
    },
    "semanticPatchId": "1721",
    "breakingChangeId": "607",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.dispatch().on [2,2] ",
      "suggestedFixDescription": "This is only breaking if $2 is not a function: If $2 is currently not a function then invoking this event would previously also throw an error later, but this error is just thrown upon declaration now. To fix this parse it as a function without arguments and return $2.",
      "unknownAccessPathQuestion": "Is this a call of the dispatch().on method from the d3 package?"
    },
    "semanticPatchId": "1722",
    "breakingChangeId": "608",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1722",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-30T16:56:25.000Z",
      "detectionPattern": "call <d3>.dispatch().on [2,2]",
      "suggestedFixDescription": "This is only breaking if $2 is not a function: If $2 is currently not a function then invoking this event would previously also throw an error later, but this error is just thrown upon declaration now. To fix this parse it as a function without arguments and return $2.",
      "unknownAccessPathQuestion": "Is this a call of the dispatch().on method from the d3 package?"
    },
    "semanticPatchId": "1722",
    "breakingChangeId": "608",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:$base.drag($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.drag()",
      "unknownAccessPathQuestion": "Is this a call of the behavior.drag() method from the d3 package?"
    },
    "semanticPatchId": "1723",
    "breakingChangeId": "609",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1723",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-09-30T17:08:19.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.drag($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.drag",
      "unknownAccessPathQuestion": "Is this a call of the behavior.drag() method from the d3 package?"
    },
    "semanticPatchId": "1723",
    "breakingChangeId": "609",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.call(“$base:prop, $args”)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.call",
      "unknownAccessPathQuestion": "Is this a call of the dispatch.call method fromt he d3 package?"
    },
    "semanticPatchId": "1724",
    "breakingChangeId": "610",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1724",
      "comment": "Pattern is currently wrong! `foo` should be `call`, but the detection does not seem to work with this function name `call`",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-01T07:16:58.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.call(\"$base:prop\", $args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.foo",
      "unknownAccessPathQuestion": "Is this a call of the dispatch.call method fromt he d3 package?"
    },
    "semanticPatchId": "1724",
    "breakingChangeId": "610",
    "enabled": true,
    "comment": "Pattern is currently wrong! `foo` should be `call`, but the detection does not seem to work with this function name `call`"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.apply(\"$base:prop\", $args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.apply",
      "unknownAccessPathQuestion": "Is this a call of the dispatch().apply method from the d3 package?"
    },
    "semanticPatchId": "1725",
    "breakingChangeId": "610",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base:base.subject($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.drag().origin",
      "unknownAccessPathQuestion": "Is this a call of the drag.origin method form the d3 package?"
    },
    "semanticPatchId": "1726",
    "breakingChangeId": "611",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1726",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-02T15:35:48.000Z",
      "primaryTemplate": {
        "pattern": "$base.subject($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.drag().origin",
      "unknownAccessPathQuestion": "Is this a call of the drag.origin method form the d3 package?"
    },
    "semanticPatchId": "1726",
    "breakingChangeId": "611",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial ",
      "detectionPattern": "call <d3>.behavior.drag().origin [0,0]",
      "suggestedFixDescription": "The default value of drag.subject() is not the same as the default value of drag.origin(). The old default value was null, but now drag.subject() will return an object with ‘x’ and ‘y’ keys, with the coordinates of the selected object as values. This change would be breaking for something like a guard condition for when the default value was null,which will no longer be true for the default value.For the documentation on drag.subject() see: https://github.com/d3/d3-drag/blob/main/README.md#drag_subject",
      "unknownAccessPathQuestion": "Is this a call of the drag.origin method from the d3 package?"
    },
    "semanticPatchId": "1727",
    "breakingChangeId": "611",
    "enabled": true,
    "comment": "initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.behavior.drag().on [1,2]",
      "suggestedFixDescription": "This is only breaking if $1 is either the “dragstart” or “dragend” event, in which case you should change this argument to be “start” or “end” respectively",
      "unknownAccessPathQuestion": "Is this a call of the drag.on method from the d3 package?"
    },
    "semanticPatchId": "1728",
    "breakingChangeId": "612",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.csv.foo ↦ d3.csvFoo",
      "primaryTemplate": {
        "pattern": "$base.$base:prop[parse=>csvParse]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.csv.{parse,parseRows,format.formatRows}",
      "unknownAccessPathQuestion": "Is this a call of a method on the d3.csv property from the d3 package?"
    },
    "semanticPatchId": "1729",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.csv.foo ↦ d3.csvFoo"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1729",
      "comment": "d3.csv.foo ↦ d3.csvFoo",
      "version": 1,
      "creationDate": "2022-10-02T17:14:22.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[parse=> csvParse, parseRows=> csvParseRows, format=> csvFormat, formatRows=> csvFormatRows]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.csv.{parse,parseRows,format,formatRows}",
      "unknownAccessPathQuestion": "Is this a call of a method on the d3.csv property from the d3 package?"
    },
    "semanticPatchId": "1729",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.csv.foo ↦ d3.csvFoo"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.tsv.foo ↦ d3.tsvFoo",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[parse=> tsvParse, parseRows=> tsvParseRows, format=> tsvFormat, formatRows=> tsvFormatRows]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.tsv.{parse,parseRows,format,formatRows}",
      "unknownAccessPathQuestion": "Is this a call of a method on the d3.tsv property from the d3 package?"
    },
    "semanticPatchId": "1730",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.tsv.foo ↦ d3.tsvFoo"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "call $base.dsvFormat($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] $2:string",
      "unknownAccessPathQuestion": "Is this a call of the dsv() constructor method from the d3 package?"
    },
    "semanticPatchId": "1731",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1731",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-03T04:53:04.000Z",
      "primaryTemplate": {
        "pattern": "$base.dsvFormat($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] 1:string",
      "unknownAccessPathQuestion": "Is this a call of the dsv() constructor method from the d3 package?"
    },
    "semanticPatchId": "1731",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; });",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1732",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial (for accessor)",
      "extraQuestion": "is $2 parsed as the accessor argument to $callee?",
      "primaryTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .row($2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] 1:function",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1733",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial (for accessor)"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1733",
      "comment": "Initial (for accessor) ",
      "version": 0,
      "creationDate": "2022-10-03T05:01:19.000Z",
      "extraQuestion": "is `$2` parsed as the accessor argument?",
      "primaryTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .row($2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] 1:function",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1733",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial (for accessor) "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1733",
      "comment": "Initial (for accessor)",
      "version": 1,
      "creationDate": "2022-10-03T05:02:50.000Z",
      "extraQuestion": "is \" $2 \" parsed as the accessor argument?",
      "primaryTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .row($2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] 1:function",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1733",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial (for accessor)"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1733",
      "comment": "Initial (for accessor OR callback) ",
      "enabled": true,
      "version": 3,
      "creationDate": "2022-10-03T05:05:59.000Z",
      "primaryTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .row($2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [2,2] 1:function",
      "alternativeTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .get($2);",
        "replacements": []
      },
      "transformationQuestion": "is \" $2 \" parsed as the accessor argument?",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1733",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial (for accessor OR callback) "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "d3.request($1)\n    .mimeType(\"text/plain\")\n    .response(function(xhr) { return xhr.responseText; })\n    .row($2)\n    .get($3);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dsv [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the dsv method from the d3 package?"
    },
    "semanticPatchId": "1734",
    "breakingChangeId": "613",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1724",
      "comment": "Pattern is currently wrong! `foo` should not be included",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-10-01T07:33:06.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop(\"$base:prop\", $args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.{foo,call,apply}",
      "unknownAccessPathQuestion": "Is this a call of the dispatch.call method fromt he d3 package?"
    },
    "semanticPatchId": "1724",
    "breakingChangeId": "610",
    "enabled": true,
    "comment": "Pattern is currently wrong! `foo` should not be included"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1725",
      "comment": "Pattern is currently wrong! `foo` should be `apply`, but the detection does not seem to work with this function name `apply` ",
      "enabled": false,
      "version": 1,
      "creationDate": "2022-10-01T07:36:18.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.apply(\"$base:prop\", $args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.foo",
      "unknownAccessPathQuestion": "Is this a call of the dispatch().apply method from the d3 package?"
    },
    "semanticPatchId": "1725",
    "breakingChangeId": "610",
    "enabled": false,
    "comment": "Pattern is currently wrong! `foo` should be `apply`, but the detection does not seem to work with this function name `apply` "
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1724",
      "comment": "Pattern is currently wrong! `foo` should not be included ",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-10-03T05:17:33.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop(\"$base:prop\", $args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.dispatch()**.{call,foo,apply}",
      "unknownAccessPathQuestion": "Is this a call of the dispatch.call method fromt he d3 package?"
    },
    "semanticPatchId": "1724",
    "breakingChangeId": "610",
    "enabled": true,
    "comment": "Pattern is currently wrong! `foo` should not be included "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.ease",
      "suggestedFixDescription": "call <d3>.ease\nsuggested fix: Instead of using $base($1,...), you would now have to use $base:base._typeOfEase(), where you find the _typeOfEase corresponding to $1 on this list: https://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. As an example, if you had `d3.ease(“linear”);` this would now become `d3.easeLinear();` where _typeOfEasy = easeLinear.",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1735",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1735",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-04T03:53:14.000Z",
      "detectionPattern": "call <d3>.ease",
      "suggestedFixDescription": "Instead of using $base($1,...), you would now have to use $base:base._typeOfEase(), where you find the _typeOfEase corresponding to $1 on this list: https://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. As an example, if you had `d3.ease(“linear”);` this would now become `d3.easeLinear();` where _typeOfEasy = easeLinear.",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1735",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1735",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-04T03:53:27.000Z",
      "detectionPattern": "call <d3>.ease",
      "suggestedFixDescription": "Instead of using $base($1,...), you would now have to use $base._typeOfEase(), where you find the _typeOfEase corresponding to $1 on this list: https://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. As an example, if you had `d3.ease(“linear”);` this would now become `d3.easeLinear();` where _typeOfEasy = easeLinear.",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1735",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.ease [2,2]",
      "suggestedFixDescription": "$base no longer takes optional arguments ($-1). Instead the named parameters should be used to set the property of the ease function. For the d3.ease-supported functions you can see the named parameters here: https://observablehq.com/@d3/easing#elasticOut. As an example instead of `d3.ease(\"elastic-out-in\", 1.2);` where `1.2` was used to set the amplitude, you would now use the named parameter like `d3.easeElastic.amplitude(1.2);",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1736",
    "breakingChangeId": "615",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1736",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-04T04:23:15.000Z",
      "detectionPattern": "call <d3>.ease 1:number",
      "suggestedFixDescription": "$base no longer takes optional arguments ($args[1]). Instead the named parameters should be used to set the property of the ease function. For the d3.ease-supported functions you can see the named parameters here: https://observablehq.com/@d3/easing#elasticOut. As an example instead of `d3.ease(\"elastic-out-in\", 1.2);` where `1.2` was used to set the amplitude, you would now use the named parameter like `d3.easeElastic.amplitude(1.2);",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1736",
    "breakingChangeId": "615",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transition().ease 1:number",
      "suggestedFixDescription": "$base no longer takes optional arguments ($args[1]). Instead the named parameters should be used to set the property of the ease function. For the d3.ease-supported functions you can see the named parameters here: https://observablehq.com/@d3/easing#elasticOut. As an example instead of `d3.transition().ease(\"elastic-out-in\", 1.2)`, where `1.2` was used to set the amplitude, you would now use the named parameter like `d3.transition().amplitude(1.2).ease(d3.easeElastic);`.",
      "unknownAccessPathQuestion": "Is this a call of the transtion().ease method from the d3 package?"
    },
    "semanticPatchId": "1737",
    "breakingChangeId": "615",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.force()**.nodes [1,1]",
      "suggestedFixDescription": "This is only breaking if you access the `px` or `py` properties of the nodes. Using force to simulate the behavior of nodes, the nodes no longer have a property representing the previous positions `px` and `py`. The solution to this change depends on your use of the two properties, but as an alternative the new property `vx` and `vy` representing the velocity of the node can be used to determine the movement direction.",
      "unknownAccessPathQuestion": "Is this the call of the force().nodes method from the d3 package?"
    },
    "semanticPatchId": "1738",
    "breakingChangeId": "616",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.forceSimulation($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.force",
      "unknownAccessPathQuestion": "Is this a constructor call of the layout.force() method from the d3 package?"
    },
    "semanticPatchId": "1739",
    "breakingChangeId": "617",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1783",
      "comment": "d3.layout.foo() ↦ d3.foo() ",
      "version": 0,
      "creationDate": "2022-10-08T07:18:50.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.{cluster,hierarchy,pack,partition,tree,treemap}",
      "unknownAccessPathQuestion": "Is this a call of layout.{cluster/hierarchy/pack/partition/tree/treemap} from the d3 pack?"
    },
    "semanticPatchId": "1783",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.layout.foo() ↦ d3.foo() "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.force()**.linkStrength",
      "suggestedFixDescription": "From d3 v. 4.0.0 the link strength should no longer be set through the layout.force.links(links).linkStrength(n) method but instead through the d3.forceLink(links).strength(n) method.E.g. if this link force is used for a force simulation like: `d3.forceSimulation(nodes).force(\"link\", d3.layout.force().links(links).linkStrength(n))` you would now use the forceLink method like `d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).strength(0.1))`. For an example of how to use the forceLink() method to set the strength of links see: https://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().linkStrength method from the d3 package?"
    },
    "semanticPatchId": "1740",
    "breakingChangeId": "618",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1740",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-05T03:59:38.000Z",
      "detectionPattern": "call <d3>.layout.force()**.linkStrength",
      "suggestedFixDescription": "From d3 v. 4.0.0 the link strength should no longer be set through the layout.force.links(links).linkStrength(n) method but instead through the d3.forceLink(links).strength(n) method. E.g. if this link force is used for a force simulation like: `d3.forceSimulation(nodes).force(\"link\", d3.layout.force().links(links).linkStrength(n))` you would now use the forceLink method like `d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).strength(0.1))`. For an example of how to use the forceLink() method to set the strength of links see: https://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().linkStrength method from the d3 package?"
    },
    "semanticPatchId": "1740",
    "breakingChangeId": "618",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.force()**.charge",
      "suggestedFixDescription": "From d3 v. 4.0.0 the charge strength should no longer be set through the `layout.force.charge(n)` method but instead through the `d3.forceManyBody().strength(n)` method.E.g. if this charge force is used for a force simulation like: `d3.forceSimulation(nodes).force(\"charge\", d3.layout.force().charge(n))` you would now use the forceManyBody method like `d3.forceSimulation(nodes).force(\"link\", d3.forceManyBody().strength(n))`. For an example of how to use the forceManyBody() method to set the strength of charges see: https://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().charge method from the d3 package?"
    },
    "semanticPatchId": "1741",
    "breakingChangeId": "619",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1741",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-05T04:28:12.000Z",
      "detectionPattern": "call <d3>.layout.force()**.charge",
      "suggestedFixDescription": "From d3 v. 4.0.0 the charge strength should no longer be set through the `layout.force.charge(n)` method but instead through the `d3.forceManyBody().strength(n)` method. E.g. if this charge force is used for a force simulation like: `d3.forceSimulation(nodes).force(\"charge\", d3.layout.force().charge(n))` you would now use the forceManyBody method like `d3.forceSimulation(nodes).force(\"link\", d3.forceManyBody().strength(n))`. For an example of how to use the forceManyBody() method to set the strength of charges see: https://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().charge method from the d3 package?"
    },
    "semanticPatchId": "1741",
    "breakingChangeId": "619",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.force()**.chargeDistance",
      "suggestedFixDescription": "Like with the charge strength, the charge distance is also no longer defined on the `layout.force()` object, but instead on the d3.forceManyBody() object. Also it is defined using the .distanceMax(n) method instead of the .chargeDistance(n) method. E.g. if you used `d3.layout.force().chargeDistance(n)`, now you should use `d3.forceManyBody().distanceMax`.",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().chargeDistance method from the d3 pacage?"
    },
    "semanticPatchId": "1742",
    "breakingChangeId": "619",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1742",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-05T04:32:55.000Z",
      "detectionPattern": "call <d3>.layout.force()**.chargeDistance",
      "suggestedFixDescription": "Like with the charge strength, the charge distance is also no longer defined on the `layout.force()` object, but instead on the d3.forceManyBody() object. Also it is defined using the .distanceMax(n) method instead of the .chargeDistance(n) method. E.g. if you used `d3.layout.force().chargeDistance(n)`, now you should use `d3.forceManyBody().distanceMax(n)`.",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().chargeDistance method from the d3 pacage?"
    },
    "semanticPatchId": "1742",
    "breakingChangeId": "619",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base;",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.force()**.start",
      "unknownAccessPathQuestion": "Is this a call of the layout.force().start method from the d3 package?"
    },
    "semanticPatchId": "1743",
    "breakingChangeId": "620",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.force()**.friction",
      "suggestedFixDescription": "From d3 v. 4.0.0 the friction should no longer be set through the `layout.force.friction(n)` method but instead through the `d3.forceSimulation().velocityDecay(n)` method. The two methods behave the same, the name change is due to `friction` actually being a misleading name regarding what the method does. For an example of the new way to set the velocity decay (the friction) see:\nhttps://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this the call of the layout.force().friction method from the d3 package?"
    },
    "semanticPatchId": "1744",
    "breakingChangeId": "621",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1744",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-05T17:08:32.000Z",
      "detectionPattern": "call <d3>.layout.force()**.friction",
      "suggestedFixDescription": "From d3 v. 4.0.0 the friction should no longer be set through the `layout.force.friction(n)` method but instead through the `d3.forceSimulation().velocityDecay(n)` method. The two methods behave the same, the name change is due to `friction` actually being a misleading name regarding what the method does. For an example of the new way to set the velocity decay (the friction) see:\nhttps://observablehq.com/@d3/simulation-tick?collection=@d3/d3-force",
      "unknownAccessPathQuestion": "Is this the call of the layout.force().friction method from the d3 package?"
    },
    "semanticPatchId": "1744",
    "breakingChangeId": "621",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.geo.foo ↦ d3.geoFoo",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[graticule=> geoGraticule, parse=> csvParse, parseRows=> csvParseRows, format=> csvFormat, formatRows=> csvFormatRows]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geo.{graticule,circle,area,bounds,centroid,distance,interpolate,length,rotation,stream,path,projection,projectionMutator,albers,albersUsa,azimuthalEqualArea,azimuthalEquidistant,conicConformal,conicEqualArea,conicEquidistant,equirectangular,gnomonic,mercator,orthographic,stereographic,transverseMercator}",
      "unknownAccessPathQuestion": "Is this a call of one of the d3.geo methods?"
    },
    "semanticPatchId": "1745",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.geo.foo ↦ d3.geoFoo"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1745",
      "comment": "d3.geo.foo ↦ d3.geoFoo ",
      "version": 0,
      "creationDate": "2022-10-06T04:59:22.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[graticule=> geoGraticule, circle => geoCircle, area => geoArea, bounds,centroid,distance,interpolate,length,rotation,stream,path,projection,projectionMutator,albers,albersUsa,azimuthalEqualArea,azimuthalEquidistant,conicConformal,conicEqualArea,conicEquidistant,equirectangular,gnomonic,mercator,orthographic,stereographic,transverseMercator]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geo.{graticule,circle,area,bounds,centroid,distance,interpolate,length,rotation,stream,path,projection,projectionMutator,albers,albersUsa,azimuthalEqualArea,azimuthalEquidistant,conicConformal,conicEqualArea,conicEquidistant,equirectangular,gnomonic,mercator,orthographic,stereographic,transverseMercator}",
      "unknownAccessPathQuestion": "Is this a call of one of the d3.geo methods?"
    },
    "semanticPatchId": "1745",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.geo.foo ↦ d3.geoFoo "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1745",
      "comment": "d3.geo.foo ↦ d3.geoFoo",
      "version": 1,
      "creationDate": "2022-10-06T05:03:17.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[graticule=> geoGraticule, circle => geoCircle, area => geoArea, bounds => geoBounds, centroid => geoCentroid, distance => geoDistance, interpolate => geoInterpolate, length => geoLength, rotation => geoRotation, stream => geoStream, path => geoPath, projection => geoProjection, projectionMutator => geoProjectionMutator, albers => geoAlbers, albersUsa => geoAlbersUsa, azimuthalEqualArea => geoAzimuthalEqualArea, azimuthalEquidistant => geoAzimuthalEquidistant, conicConformal => geoConicConformal, conicEqualArea => geoConicEqualArea, conicEquidistant => geoConicEquidistant, equirectangular => geoEquirectangular, gnomonic => geoGnomonic, mercator => geoMercator, orthographic => geoOrthographic, stereographic => geoStereographic, transverseMercator => geoTtransverseMercator]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geo.{graticule,circle,area,bounds,centroid,distance,interpolate,length,rotation,stream,path,projection,projectionMutator,albers,albersUsa,azimuthalEqualArea,azimuthalEquidistant,conicConformal,conicEqualArea,conicEquidistant,equirectangular,gnomonic,mercator,orthographic,stereographic,transverseMercator}",
      "unknownAccessPathQuestion": "Is this a call of one of the d3.geo methods?"
    },
    "semanticPatchId": "1745",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.geo.foo ↦ d3.geoFoo"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius",
      "primaryTemplate": {
        "pattern": "$base.$prop[origin => center, angle => radius]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.circle.{origin,angle}",
      "unknownAccessPathQuestion": "Is this a call of either the circle.origin or circle.angle method from the d3 package?"
    },
    "semanticPatchId": "1746",
    "breakingChangeId": "622",
    "enabled": true,
    "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1746",
      "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius ",
      "version": 0,
      "creationDate": "2022-10-06T05:17:20.000Z",
      "primaryTemplate": {
        "pattern": "$base.$prop[origin => center, angle => radius]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geoCircle()**.{origin,angle}",
      "unknownAccessPathQuestion": "Is this a call of either the geoCircle().origin or geoCircle().angle method from the d3 package?"
    },
    "semanticPatchId": "1746",
    "breakingChangeId": "622",
    "enabled": true,
    "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1746",
      "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius",
      "version": 1,
      "creationDate": "2022-10-06T05:18:32.000Z",
      "primaryTemplate": {
        "pattern": "$base.$prop[origin => center, angle => radius]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.circle()**.{origin,angle}",
      "unknownAccessPathQuestion": "Is this a call of either the circle().origin or circle().angle method from the d3 package?"
    },
    "semanticPatchId": "1746",
    "breakingChangeId": "622",
    "enabled": true,
    "comment": "circle.origin ↦ circle.center, circle.angle ↦ circle.radius"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "graticule.majorExtent ↦ graticule.extentMajor\ngraticule.minorExtent ↦ graticule.extentMinor\ngraticule.majorStep ↦ graticule.stepMajor\ngraticule.minorStep ↦ graticule.stepMinor",
      "primaryTemplate": {
        "pattern": "$base.$prop[majorExtent=> extentMajor, minorExtent=> extentMinor, majorStep=> stepMajor, minorStep=> stepMinor]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.graticule()**.{majorExtent,minorExtent,majorStep,minorStep}",
      "unknownAccessPathQuestion": "Is this a call of an extent or step method on the graticule object from the d3 package?"
    },
    "semanticPatchId": "1747",
    "breakingChangeId": "622",
    "enabled": true,
    "comment": "graticule.majorExtent ↦ graticule.extentMajor\ngraticule.minorExtent ↦ graticule.extentMinor\ngraticule.majorStep ↦ graticule.stepMajor\ngraticule.minorStep ↦ graticule.stepMinor"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geo.projection",
      "suggestedFixDescription": "This can be breaking if $1 is a standard projection from the d3.geo package. The new default values should in most cases not  become a problem, but if you do experience that your projection behaves in an undesired way after the update, we recommend specifying the specific properties of your project. The methods for which can be found here: https://devdocs.io/d3~4/d3-geo#_projection. If you are unsure of what properties your specific projection has, these can be found here: https://github.com/d3/d3-geo/blob/v3.0.0/README.md. ",
      "unknownAccessPathQuestion": "Is this a call of the geo.projections method from the d3 package?"
    },
    "semanticPatchId": "1748",
    "breakingChangeId": "623",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geo.path()**.projection 1:function",
      "suggestedFixDescription": "Parsing functions to `path.projection()` are no longer supported. This means that to be able to define an arbitrary geometry transformation instead of using $1 you will have to implement the [d3 stream interface](https://devdocs.io/d3~4/d3-geo#streams). We recommend using the [d3.geoTransform](https://devdocs.io/d3~4/d3-geo#geoTransform) method, which implements the stream interface, and returns a transformation which can be parsed to `path.projection()` instead of $1. For an example of using the stream interface to parse a transformation see: https://bl.ocks.org/mbostock/5663666",
      "unknownAccessPathQuestion": "Is this a call of the geo.path().projection method from the d3 package?"
    },
    "semanticPatchId": "1782",
    "breakingChangeId": "657",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.layout.foo() ↦ d3.foo()",
      "primaryTemplate": {
        "pattern": "$base:base.$prop",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.{cluster,hierarchy,pack,partition,tree,treemap}",
      "unknownAccessPathQuestion": "Is this a call of layout.{cluster/hierarchy/pack/partition/tree/treemap} from the d3 pack?"
    },
    "semanticPatchId": "1783",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.layout.foo() ↦ d3.foo()"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.{cluster,hierarchy,pack,partition,tree,treemap}().links",
      "suggestedFixDescription": "$base:base:prop.$base.prop has been replaced by `node.links`. The `node` in the new call should be the root, from which you got the old `nodes` array. E.g. if you currently use the call $base.nodes(root) to get the array of nodes parsed as the old argument, now you should use root.links() to get the same array of links as before.",
      "unknownAccessPathQuestion": "Is this a call of either of the {cluster/hierarchy/pack/partition/tree/treemap}.links methods from the d3 package?"
    },
    "semanticPatchId": "1784",
    "breakingChangeId": "658",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1784",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-08T07:45:56.000Z",
      "detectionPattern": "call <d3>.layout.{cluster,hierarchy,pack,partition,tree,treemap}().links",
      "suggestedFixDescription": "$base.$prop has been replaced by `node.links`. The `node` base of the new call should be the root, from which you got the old `nodes` array. E.g. if you currently use the call $base.nodes(root) to get the array of nodes parsed as the old argument, now you should use root.links() to get the same array of links as before.",
      "unknownAccessPathQuestion": "Is this a call of either of the {cluster/hierarchy/pack/partition/tree/treemap}.links methods from the d3 package?"
    },
    "semanticPatchId": "1784",
    "breakingChangeId": "658",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.bundle [1,1]",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\n\tx.links(nodes).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1785",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-08T08:34:12.000Z",
      "detectionPattern": "call <d3>.layout.bundle [1,1]",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\nx.links(nodes).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1785",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-08T08:34:50.000Z",
      "detectionPattern": "call <d3>.layout.bundle [1,1]",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\nx.links(x.nodes(root)).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1785",
      "comment": "Initial ",
      "version": 2,
      "creationDate": "2022-10-08T08:35:12.000Z",
      "detectionPattern": "call <d3>.layout.bundle",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\nx.links(x.nodes(root)).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 4,
    "semanticPatch": {
      "id": "1785",
      "comment": "Initial",
      "version": 3,
      "creationDate": "2022-10-08T08:36:42.000Z",
      "detectionPattern": "call <d3>.layout.bundle [0,0]",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\nx.links(x.nodes(root)).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 5,
    "semanticPatch": {
      "id": "1785",
      "comment": "Initial ",
      "version": 4,
      "creationDate": "2022-10-08T08:37:04.000Z",
      "detectionPattern": "call <d3>.layout.bundle() [1,1]",
      "suggestedFixDescription": "In order to compute the path from one node to another (target) you should now use `node.path(target)`. The only downside of using this new method is that it only returns a single path at a time, meaning you will most likely need a for loop to get the same functionality as before. E.g. if $1 = `x.links(x.nodes(root))`, you would need something like:\nx.links(x.nodes(root)).forEach( link => \n   root.path(link.target)\n);\nFor a real example of this new method being used see: https://bl.ocks.org/mbostock/7607999",
      "unknownAccessPathQuestion": "Is this a call of the layout.bundle method from the d3 package?"
    },
    "semanticPatchId": "1785",
    "breakingChangeId": "659",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.treemap().sticky [0,0]",
      "suggestedFixDescription": "Using a “sticky” treemap layout no longer requires setting a boolean value using `.sticky()`. However this comes with the downside that the call `$callee` is no longer viable, and there is no alternative to check whether the layout is set to sticky or not. Layouts are technically no longer “sticky” or “non-sticky” but now each transformation/allocation can be “sticky” or not, using either the `d3.treemapResquarify()` or `d3.treemapSquarify()`: https://devdocs.io/d3~4/d3-hierarchy#treemapSquarify.",
      "unknownAccessPathQuestion": "Is this a call of the treemap().sticky method from the d3 package?"
    },
    "semanticPatchId": "1786",
    "breakingChangeId": "660",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "(()=> {\n\tfor (let method of arguments) {\n\t\t$1[method] = function() {\n\t\t\tlet value = $2[method].apply($2, arguments);\n\t\t\treturn value === $2 ? $1 : value;\n\t\t}\t\n\t}\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.rebind",
      "unknownAccessPathQuestion": "Is this a call of the d3.rebind method from the d3 package?"
    },
    "semanticPatchId": "1795",
    "breakingChangeId": "665",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1786",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-09T07:51:04.000Z",
      "detectionPattern": "call <d3>.layout.treemap().sticky [0,0]",
      "suggestedFixDescription": "Using a “sticky” treemap layout no longer requires setting a boolean value using `.sticky()`. However this comes with the downside that the call ` $callee ` is no longer viable, and there is no alternative to check whether the layout is set to sticky or not. Layouts are technically no longer “sticky” or “non-sticky” but now each transformation/allocation can be “sticky” or not, using either the `d3.treemapResquarify()` or `d3.treemapSquarify()`: https://devdocs.io/d3~4/d3-hierarchy#treemapSquarify.",
      "unknownAccessPathQuestion": "Is this a call of the treemap().sticky method from the d3 package?"
    },
    "semanticPatchId": "1786",
    "breakingChangeId": "660",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.treemap().sticky [1,1]",
      "suggestedFixDescription": "Using a “sticky” treemap layout no longer requires setting a boolean value using `.sticky()`. Instead when you want to transform the size of the different nodes or of the space they occupy you should use the `d3.treemapResquarify(node, x0, y0, x1, y1)` method. For information on how this method works see: https://devdocs.io/d3~4/d3-hierarchy#treemapResquarify.",
      "unknownAccessPathQuestion": "Is this a call of the treemap().sticky method from the d3 package?"
    },
    "semanticPatchId": "1787",
    "breakingChangeId": "660",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.treemap()**.ratio [0,0]",
      "suggestedFixDescription": "The new squarify.ratio() method is for .treemap() no longer called directly but instead parsed to the new .tile() method as the algorithm used to decide the layout of map. You can call treemap.tile() without arguments to get the current tiling method, which defaults to the d3.treemapSquarify function. For more information on the new `squarify.ratio(ratio)` method see: https://devdocs.io/d3~4/d3-hierarchy#squarify_ratio",
      "unknownAccessPathQuestion": "Is this a call of the treemap().ratio method from the d3 package?"
    },
    "semanticPatchId": "1788",
    "breakingChangeId": "661",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.tile(<d3>.treemapSquarify.ratio($1))",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.ratio [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the treemap().ratio method from the d3 package?"
    },
    "semanticPatchId": "1789",
    "breakingChangeId": "661",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "number case",
      "primaryTemplate": {
        "pattern": "call $base.paddingOuter($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap().padding [1,1] 0:number",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1790",
    "breakingChangeId": "662",
    "enabled": true,
    "comment": "number case"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1790",
      "comment": "number case ",
      "version": 0,
      "creationDate": "2022-10-10T05:59:47.000Z",
      "primaryTemplate": {
        "pattern": "$base.paddingOuter($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:number",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1790",
    "breakingChangeId": "662",
    "enabled": true,
    "comment": "number case "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "null case",
      "primaryTemplate": {
        "pattern": "$base.paddingOuter($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:object",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1791",
    "breakingChangeId": "662",
    "enabled": true,
    "comment": "null case"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "array case (still testing)",
      "enabled": false,
      "primaryTemplate": {
        "pattern": "(() => {\n        $base.paddingTop($1[0]);\n        $base.paddingRight($1[1]);\n        $base.paddingBottom($1[2]);\n        $base.paddingLeft($1[3]); })()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:array",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1792",
    "breakingChangeId": "662",
    "enabled": false,
    "comment": "array case (still testing)"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1792",
      "comment": "array case (still testing) ",
      "enabled": false,
      "version": 0,
      "creationDate": "2022-10-10T06:06:00.000Z",
      "primaryTemplate": {
        "pattern": "$base.(() => {\n        $base.paddingTop($1[0]);\n        $base.paddingRight($1[1]);\n        $base.paddingBottom($1[2]);\n        $base.paddingLeft($1[3]); })()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:array",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1792",
    "breakingChangeId": "662",
    "enabled": false,
    "comment": "array case (still testing) "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1792",
      "comment": "array case (still testing)  ",
      "enabled": false,
      "version": 1,
      "creationDate": "2022-10-10T06:06:44.000Z",
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:array",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1792",
    "breakingChangeId": "662",
    "enabled": false,
    "comment": "array case (still testing)  "
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1792",
      "comment": "array case (still testing)   ",
      "enabled": false,
      "version": 2,
      "creationDate": "2022-10-10T06:14:18.000Z",
      "primaryTemplate": {
        "pattern": "",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:array",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1792",
    "breakingChangeId": "662",
    "enabled": false,
    "comment": "array case (still testing)   "
  },
  {
    "version": 4,
    "semanticPatch": {
      "id": "1792",
      "comment": "array case (still testing) ",
      "enabled": false,
      "version": 3,
      "creationDate": "2022-10-10T06:14:22.000Z",
      "detectionPattern": "call <d3>.layout.treemap()**.padding [1,1] 0:array",
      "unknownAccessPathQuestion": "Is this a call of the treemap().padding method from the d3 package?"
    },
    "semanticPatchId": "1792",
    "breakingChangeId": "662",
    "enabled": false,
    "comment": "array case (still testing) "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1795",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-11T15:29:21.000Z",
      "primaryTemplate": {
        "pattern": "(()=> {\n\tfor (let method of arguments) {\n\t\t$1 [method] = function() {\n\t\t\tlet value = $2 [method].apply($2, arguments);\n\t\t\treturn value === $2 ? $1 : value;\n\t\t}\t\n\t}\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.rebind",
      "unknownAccessPathQuestion": "Is this a call of the d3.rebind method from the d3 package?"
    },
    "semanticPatchId": "1795",
    "breakingChangeId": "665",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.interpolators** ",
      "suggestedFixDescription": " From d3 version 4 interpolators no longer offer adding custom interpolators. In most cases adding the function parsed as the new custom interpolator as a utility/helper function instead should be possible without many complications.",
      "unknownAccessPathQuestion": "Is this a method called on the d3.interpolators from the d3 package?"
    },
    "semanticPatchId": "1796",
    "breakingChangeId": "666",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1796",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-12T04:26:35.000Z",
      "detectionPattern": "call <d3>.interpolators** ",
      "suggestedFixDescription": "From d3 version 4 interpolators no longer offer adding custom interpolators. In most cases adding the function parsed as the new custom interpolator as a utility/helper function instead should be possible without many complications.",
      "unknownAccessPathQuestion": "Is this a method called on the d3.interpolators from the d3 package?"
    },
    "semanticPatchId": "1796",
    "breakingChangeId": "666",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1782",
      "comment": "Fixed call filter for to actually test the first argument, instead of the second.",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-07T11:23:16.000Z",
      "detectionPattern": "call <d3>.geo.path()**.projection 0:function",
      "suggestedFixDescription": "Parsing functions to `path.projection()` are no longer supported. This means that to be able to define an arbitrary geometry transformation instead of using $1 you will have to implement the [d3 stream interface](https://devdocs.io/d3~4/d3-geo#streams). We recommend using the [d3.geoTransform](https://devdocs.io/d3~4/d3-geo#geoTransform) method, which implements the stream interface, and returns a transformation which can be parsed to `path.projection()` instead of $1. For an example of using the stream interface to parse a transformation see: https://bl.ocks.org/mbostock/5663666",
      "unknownAccessPathQuestion": "Is this a call of the geo.path().projection method from the d3 package?"
    },
    "semanticPatchId": "1782",
    "breakingChangeId": "657",
    "enabled": true,
    "comment": "Fixed call filter for to actually test the first argument, instead of the second."
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial",
      "detectionPattern": "read <d3>.layout.treemap().{dx, dy}",
      "suggestedFixDescription": "($base.prop[dx=> x1 - $base.x0), dy=> y1 - $base.y0)]",
      "unknownAccessPathQuestion": "Are you reading the dx or dy properties of a node from the treemap() method from the d3 package here?"
    },
    "semanticPatchId": "1793",
    "breakingChangeId": "663",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1793",
      "comment": "initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-11T04:35:19.000Z",
      "detectionPattern": "call <d3>.layout.{treemap,partition}",
      "suggestedFixDescription": "This is only breaking if you are accessing the dx or dy properties of the nodes in the $prop. For d3 version 3 the `.$prop()` method would return nodes with the two properties dx and dy representing the width and height of the svg element for that node. In version 4 the node has two other properties `x1` and `y1`, being the right edge and bottom edge coordinates of the svg element of the node. Instead of node.dx you would now use node.x1-node.x0 to get the width and instead of node.dy you would use node.y1-node.y0 to get the height. For an example of this see: https://observablehq.com/@d3/treemap",
      "unknownAccessPathQuestion": "Are you reading the layout.treemap or layout.partition method from the d3 package here?"
    },
    "semanticPatchId": "1793",
    "breakingChangeId": "663",
    "enabled": true,
    "comment": "initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1793",
      "comment": "initial",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-10-11T14:41:37.000Z",
      "detectionPattern": "call <d3>.layout.{treemap,partition}",
      "suggestedFixDescription": "This is only breaking if you are accessing the dx or dy properties of the nodes in the $prop:\nFor d3 version 3 the `.$prop()` method would return nodes with the two properties dx and dy representing the width and height of the svg element for that node. \nIn version 4 the node has two other properties `x1` and `y1`, being the right edge and bottom edge coordinates of the svg element of the node. \nInstead of node.dx you would now use node.x1-node.x0 to get the width and instead of node.dy you would use node.y1-node.y0 to get the height. \nFor an example of this see: https://observablehq.com/@d3/treemap",
      "unknownAccessPathQuestion": "Are you reading the layout.treemap or layout.partition method from the d3 package here?"
    },
    "semanticPatchId": "1793",
    "breakingChangeId": "663",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1793",
      "comment": "initial ",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-10-11T14:43:32.000Z",
      "detectionPattern": "call <d3>.layout.{treemap,partition}",
      "suggestedFixDescription": "This is only breaking if you are accessing the dx or dy properties of the nodes in the $prop\nFor d3 version 3 the `.$prop()` method would return nodes with the two properties dx and dy representing the width and height of the svg element for that node. \nIn version 4 the node has two other properties `x1` and `y1`, being the right edge and bottom edge coordinates of the svg element of the node. \nInstead of node.dx you would now use node.x1-node.x0 to get the width and instead of node.dy you would use node.y1-node.y0 to get the height. \nFor an example of this see: https://observablehq.com/@d3/treemap",
      "unknownAccessPathQuestion": "Are you reading the layout.treemap or layout.partition method from the d3 package here?"
    },
    "semanticPatchId": "1793",
    "breakingChangeId": "663",
    "enabled": true,
    "comment": "initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "(typeof $1 === \"function\" ? $1 : function() { return $1; })",
        "replacements": []
      },
      "detectionPattern": "call <d3>.functor",
      "unknownAccessPathQuestion": "Is this a call of the d3.functor method from the d3 package?"
    },
    "semanticPatchId": "1794",
    "breakingChangeId": "664",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1796",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-10-12T04:27:24.000Z",
      "detectionPattern": "call <d3>.interpolators** ",
      "suggestedFixDescription": "From d3 version 4 interpolators no longer offer adding custom interpolators. \nIn most cases adding the function parsed as the new custom interpolator as a utility/helper function instead should be possible without many complications.",
      "unknownAccessPathQuestion": "Is this a method called on the d3.interpolators from the d3 package?"
    },
    "semanticPatchId": "1796",
    "breakingChangeId": "666",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "for $2 = null",
      "primaryTemplate": {
        "pattern": "(() => {\n    return ($2 === null ? () => {return NaN} : d3.interpolate($1,$2))\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolate 1:null",
      "unknownAccessPathQuestion": "Is this a call of the interpolate method from the d3 package?"
    },
    "semanticPatchId": "1797",
    "breakingChangeId": "667",
    "enabled": true,
    "comment": "for $2 = null"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "for $2 = undefined",
      "primaryTemplate": {
        "pattern": "(() => {\n    return (typeof $2 === “undefined” ? () => {return NaN} : d3.interpolate($1,$2))\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolate 1:undefined",
      "unknownAccessPathQuestion": "Is this a call of the interpolate method from the d3 package?"
    },
    "semanticPatchId": "1798",
    "breakingChangeId": "667",
    "enabled": true,
    "comment": "for $2 = undefined"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "for $2 = boolean",
      "primaryTemplate": {
        "pattern": "(() => {\n    return (typeof $2 === \"boolean\" ? () => {return NaN} : d3.interpolate($1,$2))\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolate 1:Boolean",
      "unknownAccessPathQuestion": "Is this a call of the interpolate method from the d3 package?"
    },
    "semanticPatchId": "1799",
    "breakingChangeId": "667",
    "enabled": true,
    "comment": "for $2 = boolean"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1799",
      "comment": "for $2 = boolean ",
      "version": 0,
      "creationDate": "2022-10-12T08:57:25.000Z",
      "primaryTemplate": {
        "pattern": "(() => {\n    return (typeof $2 === \"boolean\" ? () => {return NaN} : d3.interpolate($1,$2))\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolate 1:boolean",
      "unknownAccessPathQuestion": "Is this a call of the interpolate method from the d3 package?"
    },
    "semanticPatchId": "1799",
    "breakingChangeId": "667",
    "enabled": true,
    "comment": "for $2 = boolean "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial",
      "detectionPattern": "call <d3>.{interpolateObject,interpolateArray}",
      "suggestedFixDescription": "This is only breaking if $2 does not contain all the keys of $1. From version 4 the method $prop only includes the elements of $2, so the elements in $1 not present in $2 will not be included in the result. You can change $2 to have the elements of $1 by running over $1 with a for-of loop. To see how this is done with two objects see: https://codesandbox.io/s/interpolateobject-6g97do?file=/src/index.js. This method also applies to two arrays.",
      "unknownAccessPathQuestion": "Is this a call of either the interpolateObject or interpolateArray method from the d3 package?"
    },
    "semanticPatchId": "1800",
    "breakingChangeId": "668",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1798",
      "comment": "for $2 = undefined ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-12T08:49:53.000Z",
      "primaryTemplate": {
        "pattern": "(() => {\n    return (typeof $2 === \"undefined\" ? () => {return NaN} : d3.interpolate($1,$2))\n})()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolate 1:undefined",
      "unknownAccessPathQuestion": "Is this a call of the interpolate method from the d3 package?"
    },
    "semanticPatchId": "1798",
    "breakingChangeId": "667",
    "enabled": true,
    "comment": "for $2 = undefined "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{interpolateObject,interpolateArray} $1:undefined",
      "suggestedFixDescription": "In the case where either $1 or $2 would be undefined d3 version 3 would have thrown an error, where version 4 is more flexible and simply converts the undefined argument to be the empty object/array. If you still want the same error to be thrown you can throw a `new TypeError()` before the interpolate call on the condition that `$1 === undefined || $2 === undefined`.",
      "unknownAccessPathQuestion": "Is this a call of either the interpolateObject or interpolateArray method from the d3 package?"
    },
    "semanticPatchId": "1801",
    "breakingChangeId": "669",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1801",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-13T04:55:36.000Z",
      "detectionPattern": "call <d3>.{interpolateObject,interpolateArray} 0:undefined",
      "suggestedFixDescription": "In the case where either $1 or $2 would be undefined d3 version 3 would have thrown an error, where version 4 is more flexible and simply converts the undefined argument to be the empty object/array. If you still want the same error to be thrown you can throw a `new TypeError()` before the interpolate call on the condition that `$1 === undefined || $2 === undefined`.",
      "unknownAccessPathQuestion": "Is this a call of either the interpolateObject or interpolateArray method from the d3 package?"
    },
    "semanticPatchId": "1801",
    "breakingChangeId": "669",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{interpolateObject,interpolateArray} 1:undefined",
      "suggestedFixDescription": "In the case where either $1 or $2 would be undefined d3 version 3 would have thrown an error, where version 4 is more flexible and simply converts the undefined argument to be the empty object/array. If you still want the same error to be thrown you can throw a `new TypeError()` before the interpolate call on the condition that `$1 === undefined || $2 === undefined`.",
      "unknownAccessPathQuestion": "Is this the call of either the interpolateObject or interpolateArray method from the d3 package?"
    },
    "semanticPatchId": "1802",
    "breakingChangeId": "669",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{interpolateObject,interpolateArray}",
      "suggestedFixDescription": "This is only breaking if $prop is called with $1 or $2 not being an object. In d3 version 3 this would throw a `new TypeError`, where in version 4 the method is more flexible and will simply convert the non-object argument to an empty object/array. If you still want the same error to be thrown you can throw a `new TypeError()` before the $prop call on the condition that `typeof $1 !== “Object” || typeof $2 !== “Object”`.",
      "unknownAccessPathQuestion": "Is this the call of either the interpolateObject or interpolateArray method from the d3 package?"
    },
    "semanticPatchId": "1803",
    "breakingChangeId": "670",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.interpolateTransformSvg($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.interpolateTransform",
      "unknownAccessPathQuestion": "Is this a call of the interpolateTransform method from the d3 package?"
    },
    "semanticPatchId": "1804",
    "breakingChangeId": "671",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transform",
      "suggestedFixDescription": "The d3.transform() method was removed mainly due to the rare use cases for it and for easier maintainability of the d3 package. The method's functionality can be achieved without the method by running over the string argument ` $1 ` and making the object with the translate, rotate, x-skew and scale fields from this string yourself.",
      "unknownAccessPathQuestion": "is this a call of the d3.transform() method from the d3 package?"
    },
    "semanticPatchId": "1805",
    "breakingChangeId": "672",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1805",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-13T14:57:30.000Z",
      "detectionPattern": "call <d3>.transform",
      "suggestedFixDescription": "The d3.transform() method was removed mainly due to the rare use cases for it and for easier maintainability of the d3 package. \nThe method's functionality can be achieved without the method by running over the string argument ` $1 ` and making the object with the translate, rotate, x-skew and scale fields from this string yourself.",
      "unknownAccessPathQuestion": "is this a call of the d3.transform() method from the d3 package?"
    },
    "semanticPatchId": "1805",
    "breakingChangeId": "672",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.polygon",
      "suggestedFixDescription": "The geom.polygon constructor has been removed, and the .area() and .centroid() methods previously called on the polygon object have been renamed and now takes $1 as the argument. We will also insert a comment in the source code where these methods are called. This means that $callee is no longer necessary to access the methods previously called on the polygon object. ",
      "unknownAccessPathQuestion": "Is this a constructor call of the geom.polygon object from the d3 package?"
    },
    "semanticPatchId": "1806",
    "breakingChangeId": "673",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1806",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-13T15:21:31.000Z",
      "detectionPattern": "call <d3>.geom.polygon",
      "suggestedFixDescription": "The geom.polygon constructor has been removed, and the .area() and .centroid() methods previously called on the polygon object have been renamed and now takes $1 as the argument. \nWe will also insert a comment in the source code where these methods are called. \nThis means that $callee is no longer necessary to access the methods previously called on the polygon object. ",
      "unknownAccessPathQuestion": "Is this a constructor call of the geom.polygon object from the d3 package?"
    },
    "semanticPatchId": "1806",
    "breakingChangeId": "673",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.polygon().{area,centroid}",
      "suggestedFixDescription": "The geom.polygon constructor has been removed and instead of calling $prop on the polygon object you should call the new $prop[area=> polygonArea, centroid=> polygonCentroid] method which takes the vertices you parsed as the argument to the constructor as their only argument. \nTo see the documentation for this new method see: https://devdocs.io/d3~4/d3-polygon",
      "unknownAccessPathQuestion": "Is this a call of either the polygon().area or polygon.centroid method from the d3 package?"
    },
    "semanticPatchId": "1807",
    "breakingChangeId": "673",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.polygon().clip",
      "suggestedFixDescription": "Depending on what kind of polygon you are clipping to, this can be a complicated problem to solve, but we do have a few recommendations.\n1) If you are clipping to some axis-aligned rectangle (see example: https://bl.ocks.org/mbostock/5b2a1d47ae020b9533c24129ada97ff0) we recommend using the `d3.geoIdentity()` method: https://devdocs.io/d3~4/d3-geo#geoIdentity \n2) If you are clipping to some other simple polygon (see example: https://bl.ocks.org/mbostock/ece50c027bdf8cc20003a17d93e4f60e) you could try to implement the Sutherland–Hodgman algorithm: https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm\n3) For other kinds of polygon clipping we recommend using another package like the polygon-clipping package (https://github.com/mfogel/polygon-clipping) which have been effective before (see example: https://observablehq.com/@fil/hello-polygon-clipping).",
      "unknownAccessPathQuestion": "Is this a call of the polygon().clip method from the d3 package?"
    },
    "semanticPatchId": "1812",
    "breakingChangeId": "677",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.hull",
      "suggestedFixDescription": "This simplification means that instead of using an empty constructor call to then use the .hull(vertices) method with the vertices, you should now provide the vertices directly in the constructor call, the name of which has also been changed. E.g. instead of\n`const hull = d3.geom.hull();`\n\t`const convexHull = hull(vertices);`\nyou would now use something like\n\t`const convexHull  = d3.polygonHull(vertices)`\nwhich would have the same result. Also the x/y-coordinate accessor methods have been removed. We will insert an additional comment wherever you have used these, and provide another suggested fix for these.",
      "unknownAccessPathQuestion": "Is this the call of the geom.hull constructor from the d3 package?"
    },
    "semanticPatchId": "1816",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1816",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-15T13:29:25.000Z",
      "detectionPattern": "call <d3>.geom.hull",
      "suggestedFixDescription": "This simplification means that instead of using an empty constructor call to then use the .hull(vertices) method with the vertices, you should now provide the vertices directly in the constructor call, the name of which has also been changed. \nE.g. instead of\n\t`const hull = d3.geom.hull();`\n\t`const convexHull = hull(vertices);`\nyou would now use something like\n\t`const convexHull  = d3.polygonHull(vertices)`\nwhich would have the same result. Also the x/y-coordinate accessor methods have been removed. We will insert an additional comment wherever you have used these, and provide another suggested fix for these.",
      "unknownAccessPathQuestion": "Is this the call of the geom.hull constructor from the d3 package?"
    },
    "semanticPatchId": "1816",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.hull()",
      "suggestedFixDescription": "This method was removed. See the provided suggested fix at the constructor call of $base for the explanation of this. For now you can remove the `.hull()` method, it is no longer needed to create the convex hull.",
      "unknownAccessPathQuestion": "Is this the call of the default method on the object created with the geom.hull constructor from the d3 package?"
    },
    "semanticPatchId": "1817",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1817",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-15T13:33:06.000Z",
      "detectionPattern": "call <d3>.geom.hull()",
      "suggestedFixDescription": "This method was removed. See the provided suggested fix at the constructor call of ` $callee ` for the explanation of this. For now you can remove the `.hull()` method, it is no longer needed to create the convex hull.",
      "unknownAccessPathQuestion": "Is this the call of the default method on the object created with the geom.hull constructor from the d3 package?"
    },
    "semanticPatchId": "1817",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.hull().{x,y} [0,0]",
      "suggestedFixDescription": "Botht the x and y accessor methods for the .hull() method  have been removed. If you have not changed the accessor method (by calling $base.$prop(accessor) with a custom accessor as argument) you can access the x-coordinate as the first property on the vertex and the y-coordinate as the second (like `vertex[0]/vertex[1]`). If you are using a custom accessor method, we recommend using a helper/utility method instead.",
      "unknownAccessPathQuestion": "Is this a call of either the .x() or .y() accessor method of the geom.hull() object from the d3 package?"
    },
    "semanticPatchId": "1818",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.hull().{x,y} [1,1]",
      "suggestedFixDescription": "$base.$prop has been removed. \nIf you need the custom accessor method for the x- and y-coordinates, we recommend using a helper/utility method for this purpose.",
      "unknownAccessPathQuestion": "Is this the call of either the hull.x() or hull.y() setter method from the d3 package?"
    },
    "semanticPatchId": "1819",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.hull().{x,y}() [1,1]",
      "suggestedFixDescription": "This is associated with the previous `.hull` suggested fixes. \nInstead of using the x- or y-coordinate accessor methods, you should either access vertex property directly like vertex[0] / vertex[1], or if you are using custom accessor methods you can translate these into being helper/utility methods.",
      "unknownAccessPathQuestion": "Is this a call of the function returned by either the hull.x() or hull.y() getter method from the d3 package?"
    },
    "semanticPatchId": "1820",
    "breakingChangeId": "680",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.geom.quadtree",
      "suggestedFixDescription": "This is theoretically a breaking change, but it will most likely not affect anything. Our suggestion is to not think about this unless you run into a stack overflow after upgrading.",
      "unknownAccessPathQuestion": "Is this the constructor call of a quadtree from the d3 package?"
    },
    "semanticPatchId": "1821",
    "breakingChangeId": "681",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.quadtree",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.quadtree",
      "unknownAccessPathQuestion": "Is this a constructor call of the quadtree object from the d3 package?"
    },
    "semanticPatchId": "1822",
    "breakingChangeId": "682",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1822",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-15T14:07:45.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.quadtree($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.quadtree",
      "unknownAccessPathQuestion": "Is this a constructor call of the quadtree object from the d3 package?"
    },
    "semanticPatchId": "1822",
    "breakingChangeId": "682",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "for the signature quadtree(points)",
      "primaryTemplate": {
        "pattern": "$callee.addAll($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.quadtree() [1,1]",
      "unknownAccessPathQuestion": "Is this the call of the default method returned by the geom.quadtree() constructor call from the d3 package?"
    },
    "semanticPatchId": "1823",
    "breakingChangeId": "683",
    "enabled": true,
    "comment": "for the signature quadtree(points)"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "for the signature quadtree(points, x2, y2)",
      "primaryTemplate": {
        "pattern": "$callee.x($2).y($3).addAll($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.quadtree() [3,3]",
      "unknownAccessPathQuestion": "Is this the call of the default method returned by the geom.quadtree constructor call from the d3 package?"
    },
    "semanticPatchId": "1824",
    "breakingChangeId": "683",
    "enabled": true,
    "comment": "for the signature quadtree(points, x2, y2)"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.random.foo ↦ d3.randomFoo",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[normal=> randomNormal,logNormal=> randomNormal,bates=> randomBates,randomBates=> randomIrwinHall]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.random.{normal,logNormal,bates,irwinHall}",
      "unknownAccessPathQuestion": "Is this the call of one of the d3.random methods from the d3 package?"
    },
    "semanticPatchId": "1825",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.random.foo ↦ d3.randomFoo"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1825",
      "comment": "d3.random.foo ↦ d3.randomFoo ",
      "version": 0,
      "creationDate": "2022-10-16T10:53:44.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[normal=> randomNormal,logNormal=> randomNormal,bates=> randomBates,randomBates=> randomIrwinHall]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.random.{normal,logNormal,bates,irwinHall}",
      "unknownAccessPathQuestion": "Is this the call of one of the d3.random methods from the d3 package?"
    },
    "semanticPatchId": "1825",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.random.foo ↦ d3.randomFoo "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1825",
      "comment": "d3.random.foo ↦ d3.randomFoo  ",
      "version": 1,
      "creationDate": "2022-10-16T10:54:22.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[normal=> randomNormal,logNormal=> randomNormal,bates=> randomBates,irwinHall=> randomIrwinHall]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.random.{normal,logNormal,bates,irwinHall}",
      "unknownAccessPathQuestion": "Is this the call of one of the d3.random methods from the d3 package?"
    },
    "semanticPatchId": "1825",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.random.foo ↦ d3.randomFoo  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.request($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.xhr [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the .xhr() method from the d3 package?"
    },
    "semanticPatchId": "1826",
    "breakingChangeId": "684",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.request($1, $3).mimeType($2) ",
        "replacements": []
      },
      "detectionPattern": "call <d3>.xhr [2,3] 1:string",
      "unknownAccessPathQuestion": "Is this a call of the .xhr() method from the d3 package?"
    },
    "semanticPatchId": "1827",
    "breakingChangeId": "684",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{xhr,send,text,xml,csv,tsv,json,html} [2,2] 1:function",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this the call of one of the xhr methods from the d3 package?"
    },
    "semanticPatchId": "1828",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{xhr,send,text,xml,csv,tsv} [3,3]",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this the call of on of the xhr methods from the d3 package?"
    },
    "semanticPatchId": "1829",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.xhr().get [1,1]",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this a call of the xhr().get method from the d3 package?"
    },
    "semanticPatchId": "1830",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1830",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-17T11:17:19.000Z",
      "detectionPattern": "call <d3>.{xhr,text,xml,csv,tsv,html}().get [1,1]",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this a call of the xhr().get method from the d3 package?"
    },
    "semanticPatchId": "1830",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1830",
      "comment": "Initial ",
      "version": 2,
      "creationDate": "2022-10-17T11:19:49.000Z",
      "detectionPattern": "call <d3>.{xhr,text,xml,csv,tsv,html}()**.get [1,1]",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this a call of the xhr().get method from the d3 package?"
    },
    "semanticPatchId": "1830",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{xhr,text,xml,csv,tsv,html}()**.post [1,1] 0:functio",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this the call of the xhr().post method from the d3 package?"
    },
    "semanticPatchId": "1831",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1831",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-17T11:22:30.000Z",
      "detectionPattern": "call <d3>.{xhr,text,xml,csv,tsv,html}()**.post [1,1] 0:function",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this the call of the xhr().post method from the d3 package?"
    },
    "semanticPatchId": "1831",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{xhr,text,xml,csv,tsv,html}()**.post [2,2]",
      "suggestedFixDescription": "This is only breaking in cases where errors can occur, and even then, depending on how you are currently handling errors, this might still not be breaking. There is no general fix for this change, but we recommend that you make sure you're declaring an event listener using the new [request.on](https://devdocs.io/d3~4/d3-request#request_on) method, and then try to make the handling of errors as general as possible, and not rely on what the specific error object is. For an example of a simple event listener set with request.on see: https://devdocs.io/d3~4/d3-request#request_send.",
      "unknownAccessPathQuestion": "Is this the call of the xhr.post method from the d3 package?"
    },
    "semanticPatchId": "1832",
    "breakingChangeId": "685",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$callee($1,$3).mimeType($2) ",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{text,xml} [2,3] 1:string",
      "unknownAccessPathQuestion": "Is this a call of either the d3.text or d3.xml method where the mimeType argument is used from the d3 package?"
    },
    "semanticPatchId": "1833",
    "breakingChangeId": "686",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.scale.foo => d3.scaleFoo",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[linear=> scaleLinear,sqrt=> scaleSqrt,pow=> scalePow,log=> scaleLog,threshold=> scaleThreshold,identity=> scaleIdentity,ordinal=> scaleOrdinal]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.{linear,sqrt,quantize,pow,log,threshold,threshold,identity,ordinal}",
      "unknownAccessPathQuestion": "Is this one of the d3.scale methods from the d3 package?"
    },
    "semanticPatchId": "1834",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.scale.foo => d3.scaleFoo"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1834",
      "comment": "d3.scale.foo => d3.scaleFoo ",
      "version": 0,
      "creationDate": "2022-10-18T07:46:25.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop[linear=> scaleLinear,sqrt=> scaleSqrt,pow=> scalePow,log=> scaleLog,threshold=> scaleThreshold,identity=> scaleIdentity,ordinal=> scaleOrdinal]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.{linear,sqrt,quantize,pow,log,threshold,threshold,identity,ordinal}",
      "unknownAccessPathQuestion": "Is this one of the d3.scale methods from the d3 package?"
    },
    "semanticPatchId": "1834",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.scale.foo => d3.scaleFoo "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.scaleTime($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.scale",
      "unknownAccessPathQuestion": "Is this a call of the time.scale method from the d3 package?"
    },
    "semanticPatchId": "1835",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.scaleUtc($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.scale.utc",
      "unknownAccessPathQuestion": "is this a call of the time.scale.utc method from the d3 package?"
    },
    "semanticPatchId": "1836",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1836",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-18T07:50:27.000Z",
      "primaryTemplate": {
        "pattern": "$base:base:base.scaleUtc($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.scale.utc",
      "unknownAccessPathQuestion": "is this a call of the time.scale.utc method from the d3 package?"
    },
    "semanticPatchId": "1836",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "extraQuestion": "Is the domain of the scale on which the `.ticks($args)` method are being called in decending order?",
      "primaryTemplate": {
        "pattern": "$callee($args).reverse()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{log,pow,scale,linear,identity}.ticks",
      "unknownAccessPathQuestion": "Is this the call of a .ticks method from the d3 package?"
    },
    "semanticPatchId": "1837",
    "breakingChangeId": "687",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1837",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-18T08:10:36.000Z",
      "extraQuestion": "Is the domain of the scale on which the `.ticks($args)` method are being called in decending order?",
      "primaryTemplate": {
        "pattern": "$callee($args).reverse()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.{log,pow,linear,identity}**.ticks",
      "unknownAccessPathQuestion": "Is this the call of a .ticks method from the d3 package?"
    },
    "semanticPatchId": "1837",
    "breakingChangeId": "687",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "extraQuestion": "Is the domain of the scale on which the `.ticks($args)` method are being called in decending order?",
      "primaryTemplate": {
        "pattern": "$callee($args).reverse()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.scale()**.ticks",
      "unknownAccessPathQuestion": "Is this the call of a .ticks method from the d3 package?"
    },
    "semanticPatchId": "1838",
    "breakingChangeId": "687",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "extraQuestion": "Is the domain of the scale on which the `.ticks($args)` method are being called in decending order?",
      "primaryTemplate": {
        "pattern": "$callee($args).reverse()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.scale.utc()**.ticks",
      "unknownAccessPathQuestion": "Is this the call of a .ticks method from the d3 package?"
    },
    "semanticPatchId": "1839",
    "breakingChangeId": "687",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$callee(Infinity)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.log().tickFormat [0,0]",
      "unknownAccessPathQuestion": "Is this a call of the scale.log().tickFormat method from the d3 package?"
    },
    "semanticPatchId": "1840",
    "breakingChangeId": "688",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$callee(Infinity,$1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.log().tickFormat [1,1] 1:string",
      "unknownAccessPathQuestion": "Is this a call of he scale.log().tickFormat method from the d3 package?"
    },
    "semanticPatchId": "1841",
    "breakingChangeId": "688",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1841",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-19T05:15:24.000Z",
      "primaryTemplate": {
        "pattern": "$callee(Infinity,$1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.log().tickFormat [1,1] 0:string",
      "unknownAccessPathQuestion": "Is this a call of he scale.log().tickFormat method from the d3 package?"
    },
    "semanticPatchId": "1841",
    "breakingChangeId": "688",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1841",
      "comment": "Initial",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-10-19T05:16:10.000Z",
      "primaryTemplate": {
        "pattern": "$callee(Infinity,$1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.log()**.tickFormat [1,1] 0:string",
      "unknownAccessPathQuestion": "Is this a call of he scale.log().tickFormat method from the d3 package?"
    },
    "semanticPatchId": "1841",
    "breakingChangeId": "688",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1840",
      "comment": "Initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-19T05:13:29.000Z",
      "primaryTemplate": {
        "pattern": "$callee(Infinity)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.log()**.tickFormat [0,0]",
      "unknownAccessPathQuestion": "Is this a call of the scale.log().tickFormat method from the d3 package?"
    },
    "semanticPatchId": "1840",
    "breakingChangeId": "688",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands",
      "suggestedFixDescription": "The functionality of ordinal.rangeBands() has been moved to the class of d3.scaleBand(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scaleBand()`. This also means that instead of the .rangeBands() method it’s now just called .range(). E.g.instead of the code:\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangeBands([0, width]);\nyou should now use \nvar x = d3.scaleBand()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\n\t\tFor information about the new .scaleBand() class see: https://devdocs.io/d3~4/d3-scale#scaleBand.",
      "unknownAccessPathQuestion": "Is this the call of the scale.ordinal().rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1842",
    "breakingChangeId": "689",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1842",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-19T05:52:23.000Z",
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands",
      "suggestedFixDescription": "The functionality of ordinal.rangeBands() has been moved to the class of d3.scaleBand(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scaleBand()`. This also means that instead of the .rangeBands() method it’s now just called .range(). \nE.g.instead of the code:\n    `var x = d3.scale.ordinal()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangeBands([0, width]);`\nyou should now use \n    `var x = d3.scaleBand()\n        .domain([\"a\", \"b\", \"c\"])\n        .range([0, width]);`\nFor information about the new .scaleBand() class see: https://devdocs.io/d3~4/d3-scale#scaleBand.",
      "unknownAccessPathQuestion": "Is this the call of the scale.ordinal().rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1842",
    "breakingChangeId": "689",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeRoundBands",
      "suggestedFixDescription": "The functionality of ordinal.rangeRoundBands() has been moved to the class of d3.scaleBand(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scaleBand()`. This also means that instead of the .rangeRoundBands() method it’s now just called .rangeRound(). \nE.g.instead of the code:\n    `var x = d3.scale.ordinal()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangeRoundBands([0, 100]);\nyou should now use \n    `var x = d3.scaleBand()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangeRound([0, 100]);\nFor information about the new .scaleBand() class see: https://devdocs.io/d3~4/d3-scale#scaleBand",
      "unknownAccessPathQuestion": "Is this a call of the scale.ordinal().rangeRoundBands method from the d3 package?"
    },
    "semanticPatchId": "1843",
    "breakingChangeId": "689",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands [2,2]",
      "suggestedFixDescription": "Besides changing the ordinal().rangeBands() method to be the new scaleBand().range() method (explained in another comment) you also have to supply the padding value through the new band.paddingInner($2) method instead of through the optional argument `$2` parsed to ordinal.rangeBands. \nFor further info on the paddingInner method see: https://devdocs.io/d3~4/d3-scale#band_paddingInner.",
      "unknownAccessPathQuestion": "Is this a call of the ordinal.rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1844",
    "breakingChangeId": "690",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands [3,3]",
      "suggestedFixDescription": "Besides changing the ordinal().rangeBands() method to be the new scaleBand().range() method (as explained in another comment) you also have to supply the padding and outerPadding values through the new band.paddingInner($2) and band.paddingOuter($3) methods respectively instead of through the optional arguments `$2` and `$3` parsed to ordinal.rangeBands.\nFor further info on the paddingInner and paddingOuter methods see: https://devdocs.io/d3~4/d3-scale#band_paddingInner.",
      "unknownAccessPathQuestion": "Is this a call of the ordinal().rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1845",
    "breakingChangeId": "690",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1845",
      "comment": "The suggested fix is not used, we are using a template instead",
      "version": 0,
      "creationDate": "2022-10-19T08:36:09.000Z",
      "primaryTemplate": {
        "pattern": "$base.range($1).paddingInner($2).paddingOuter($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands [3,3]",
      "suggestedFixDescription": "Besides changing the ordinal().rangeBands() method to be the new scaleBand().range() method (as explained in another comment) you also have to supply the padding and outerPadding values through the new band.paddingInner($2) and band.paddingOuter($3) methods respectively instead of through the optional arguments `$2` and `$3` parsed to ordinal.rangeBands.\nFor further info on the paddingInner and paddingOuter methods see: https://devdocs.io/d3~4/d3-scale#band_paddingInner.",
      "unknownAccessPathQuestion": "Is this a call of the ordinal().rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1845",
    "breakingChangeId": "690",
    "enabled": true,
    "comment": "The suggested fix is not used, we are using a template instead"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1844",
      "comment": "The suggested fix is not used, we are using a template instead",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-19T08:32:33.000Z",
      "primaryTemplate": {
        "pattern": "$base.range($1).paddingInner($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.ordinal()**.rangeBands [2,2]",
      "suggestedFixDescription": "Besides changing the ordinal().rangeBands() method to be the new scaleBand().range() method (explained in another comment) you also have to supply the padding value through the new band.paddingInner($2) method instead of through the optional argument `$2` parsed to ordinal.rangeBands. \nFor further info on the paddingInner method see: https://devdocs.io/d3~4/d3-scale#band_paddingInner.",
      "unknownAccessPathQuestion": "Is this a call of the ordinal.rangeBands method from the d3 package?"
    },
    "semanticPatchId": "1844",
    "breakingChangeId": "690",
    "enabled": true,
    "comment": "The suggested fix is not used, we are using a template instead"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.scale.ordinal()**.{rangePoints,rangeRoundPoints}",
      "suggestedFixDescription": "The functionality of ordinal.$prop() has been moved to the class of d3.scalePoint(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scalePoint()`. This also means that instead of the .$prop() method it’s now just called .$prop[rangePoints=> range, rangeRoundPoints=> rangeRound](). \nE.g.instead of the code:\n    `var x = d3.scale.ordinal()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangePoints([0, 100]);`\nyou should now use \n    `var x = d3.scalePoint()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangeRound([0, 100]);`\nFor information about the new .scalePoint() class see: https://devdocs.io/d3~4/d3-scale#scalePoint.",
      "unknownAccessPathQuestion": "Is this the call of either the .rangePoints() or .rangeRoundPoints methods of the scale.ordinal class from the d3 package? "
    },
    "semanticPatchId": "1847",
    "breakingChangeId": "692",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1847",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-19T09:22:31.000Z",
      "detectionPattern": "call <d3>.scale.ordinal()**.{rangePoints,rangeRoundPoints}",
      "suggestedFixDescription": "The functionality of ordinal.$prop() has been moved to the class of d3.scalePoint(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scalePoint()`. This also means that instead of the .$prop() method it’s now just called .$prop[rangePoints=> range, rangeRoundPoints=> rangeRound](). \nE.g.instead of the code:\n    `var x = d3.scale.ordinal()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangePoints([0, 100]);`\nyou should now use \n    `var x = d3.scalePoint()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangeRound([0, 100]);`\nFor information about the new .scalePoint() class see: https://devdocs.io/d3~4/d3-scale#scalePoint.",
      "unknownAccessPathQuestion": "Is this the call of either the .rangePoints() or .rangeRoundPoints methods of the scale.ordinal class from the d3 package? "
    },
    "semanticPatchId": "1847",
    "breakingChangeId": "692",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1847",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-10-19T09:23:35.000Z",
      "detectionPattern": "call <d3>.scale.ordinal()**.{rangePoints,rangeRoundPoints}",
      "suggestedFixDescription": "The functionality of ordinal.$prop() has been moved to the class of d3.scalePoint(). This means that instead of the constructor call `d3.scale.ordinal()` you now need `d3.scalePoint()`. This also means that instead of the .$prop() method it’s now just called .$prop[rangePoints=> range, rangeRoundPoints=> rangeRound](). \nE.g.instead of the code:\n    `var x = d3.scale.ordinal()\n        .domain([\"a\", \"b\", \"c\"])\n        .rangePoints([0, 100]);`\nyou should now use \n    `var x = d3.scalePoint()\n        .domain([\"a\", \"b\", \"c\"])\n        .range([0, 100]);`\nFor information about the new .scalePoint() class see: https://devdocs.io/d3~4/d3-scale#scalePoint.",
      "unknownAccessPathQuestion": "Is this the call of either the .rangePoints() or .rangeRoundPoints methods of the scale.ordinal class from the d3 package? "
    },
    "semanticPatchId": "1847",
    "breakingChangeId": "692",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.range($1).padding($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.ordinal()**.rangePoints [2,2]",
      "unknownAccessPathQuestion": "Is this the call of the ordinal().rangePoints method from the d3 package?"
    },
    "semanticPatchId": "1848",
    "breakingChangeId": "693",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.scaleOrdinal(<d3>.$prop)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.scale.{category10,category20,category20b,category20c}",
      "unknownAccessPathQuestion": "Is this the constructor call of one of the color catagory scales from the d3 package?"
    },
    "semanticPatchId": "1849",
    "breakingChangeId": "694",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "There is no direct replacement for these two private properties, but whatever functionality you are using these properties for should be possible to achieve with methods and properties from the public API. \nSome different ways to access similar properties are:\n1. The parent element of different elements/nodes are available as the `this.parentNode` property.\n2. The group of a specific selection is available as the `nodes` argument to all the different select methods \n3. The parents of a specific selection is parsed to the selection.data method as the `parents` property.\nFor the public API see: https://devdocs.io/d3~4/d3-selection",
        "replacements": []
      },
      "detectionPattern": "read <d3>.{select,selectAll}**.{_groups,_parents}",
      "unknownAccessPathQuestion": "is this reading either the __groups or _parents properties from the select class from the d3 package?"
    },
    "semanticPatchId": "1850",
    "breakingChangeId": "695",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1850",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-20T12:09:00.000Z",
      "detectionPattern": "read <d3>.{select,selectAll}**.{_groups,_parents}",
      "suggestedFixDescription": "There is no direct replacement for these two private properties, but whatever functionality you are using these properties for should be possible to achieve with methods and properties from the public API. \nSome different ways to access similar properties are:\n1. The parent element of different elements/nodes are available as the `this.parentNode` property.\n2. The group of a specific selection is available as the `nodes` argument to all the different select methods \n3. The parents of a specific selection is parsed to the selection.data method as the `parents` property.\nFor the public API see: https://devdocs.io/d3~4/d3-selection",
      "unknownAccessPathQuestion": "is this reading either the __groups or _parents properties from the select class from the d3 package?"
    },
    "semanticPatchId": "1850",
    "breakingChangeId": "695",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.{data,sort}",
      "suggestedFixDescription": "This is only breaking if you are calling $prop outside of a declaration. In that case you would have to change the reference of the selection variable.\nFor instance if you have:\n\t`const selection = d3.select(\"body\").append(\"table\").selectAll(\"tr\");\nselection.data(matrix);`\nthen you would now need something like\n`let selection = d3.select(\"body\").append(\"table\").selectAll(\"tr\");\nselection = selection.data(matrix);`\nThe same goes for `.sort()` method calls.",
      "unknownAccessPathQuestion": "Is this the call of either the selection.data og selection.sort method from the d3 package?"
    },
    "semanticPatchId": "1851",
    "breakingChangeId": "696",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1851",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-20T15:42:49.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.{data,sort}",
      "suggestedFixDescription": "This is only breaking if you are calling .$prop() outside of a declaration. In that case you would have to change the reference of the selection variable.\nFor instance if you have:\n\t`const selection = d3.select(\"body\").append(\"table\").selectAll(\"tr\");\n\tselection.data(matrix);`\nthen you would now need something like\n\t`let selection = d3.select(\"body\").append(\"table\").selectAll(\"tr\");\n\tselection = selection.data(matrix);`\nThe same goes for `.sort()` method calls.",
      "unknownAccessPathQuestion": "Is this the call of either the selection.data og selection.sort method from the d3 package?"
    },
    "semanticPatchId": "1851",
    "breakingChangeId": "696",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.append",
      "suggestedFixDescription": "This is only breaking if you are changing the update selection. If you are, you need the .merge() call before you would normally change the update selection. The merge call should be called with the name of the newly appended node, in order to merge this node into the update selection.\nFor an example of the old and new way of using the .append() method see:\nhttps://github.com/d3/d3/blob/main/CHANGES.md#selections-d3-selection.",
      "unknownAccessPathQuestion": "Is this the call of the selection.append method from the d3 package?"
    },
    "semanticPatchId": "1852",
    "breakingChangeId": "697",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1852",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-20T16:15:21.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.append",
      "suggestedFixDescription": "This is only breaking if you are changing the update selection. If you are, you need the .merge() call before you would normally change the update selection. \nThe merge call should be called with the name of the newly appended node, in order to merge this node into the update selection.\nFor an example of the old and new way of using the .append() method see:\nhttps://github.com/d3/d3/blob/main/CHANGES.md#selections-d3-selection.",
      "unknownAccessPathQuestion": "Is this the call of the selection.append method from the d3 package?"
    },
    "semanticPatchId": "1852",
    "breakingChangeId": "697",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.insert($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{select,selectAll}**.append",
      "unknownAccessPathQuestion": "Is this a call of the selection.append method from the d3 package?"
    },
    "semanticPatchId": "1853",
    "breakingChangeId": "698",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.append($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{select,selectAll}**.insert [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the selection.insert method from the d3 package?"
    },
    "semanticPatchId": "1854",
    "breakingChangeId": "698",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.data [1,2] ",
      "suggestedFixDescription": "This changes the `enter` selection if $1 includes objects with duplicate keys. Previously data with duplicate keys would not be included in the enter selection but only in the exit selection. From v. 4.x the duplicate data is included in both the enter and exit selections. There is no quick general way to reverse this functionality, and if this new behavior is not desired, we recommend using the .filter() method on $1 before using it in the .data() call. For an example of how .filter() can be used to remove duplicated data in an array see: https://www.javascripttutorial.net/array/javascript-remove-duplicates-from-array/",
      "unknownAccessPathQuestion": "Is this a call of the selection.data method from the d3 package?"
    },
    "semanticPatchId": "1855",
    "breakingChangeId": "699",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1855",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-21T08:00:09.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.data [1,2] $1:object",
      "suggestedFixDescription": "This changes the `enter` selection if $1 includes objects with duplicate keys. Previously data with duplicate keys would not be included in the enter selection but only in the exit selection. From v. 4.x the duplicate data is included in both the enter and exit selections. There is no quick general way to reverse this functionality, and if this new behavior is not desired, we recommend using the .filter() method on $1 before using it in the .data() call. For an example of how .filter() can be used to remove duplicated data in an array see: https://www.javascripttutorial.net/array/javascript-remove-duplicates-from-array/",
      "unknownAccessPathQuestion": "Is this a call of the selection.data method from the d3 package?"
    },
    "semanticPatchId": "1855",
    "breakingChangeId": "699",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1855",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-10-21T08:02:43.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.data [1,2]",
      "suggestedFixDescription": "This changes the `enter` selection if $1 includes objects with duplicate keys. Previously data with duplicate keys would not be included in the enter selection but only in the exit selection. From v. 4.x the duplicate data is included in both the enter and exit selections. There is no quick general way to reverse this functionality, and if this new behavior is not desired, we recommend using the .filter() method on $1 before using it in the .data() call. For an example of how .filter() can be used to remove duplicated data in an array see: https://www.javascripttutorial.net/array/javascript-remove-duplicates-from-array/",
      "unknownAccessPathQuestion": "Is this a call of the selection.data method from the d3 package?"
    },
    "semanticPatchId": "1855",
    "breakingChangeId": "699",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.data [0,0]",
      "suggestedFixDescription": " Before version 4.0 of d3 the call to .data() in getter mode (called with 0 arguments) would return only the data in the first selection. After version 4.0 the call returns the data from all selections. If you only want the data from the first selection, you will now need to call `.data()` before calling additional .select() or .selectAll() methods.",
      "unknownAccessPathQuestion": "is this the call of the selection.data method from the d3 package?"
    },
    "semanticPatchId": "1856",
    "breakingChangeId": "700",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1856",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-21T14:22:10.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.data [0,0]",
      "suggestedFixDescription": "Before version 4.0 of d3 the call to .data() in getter mode (called with 0 arguments) would return only the data in the first selection. After version 4.0 the call returns the data from all selections. \nIf you only want the data from the first selection, you will now need to call `.data()` before calling additional .select() or .selectAll() methods.",
      "unknownAccessPathQuestion": "is this the call of the selection.data method from the d3 package?"
    },
    "semanticPatchId": "1856",
    "breakingChangeId": "700",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.namespaces",
        "replacements": []
      },
      "detectionPattern": "read <d3>.ns.prefix",
      "unknownAccessPathQuestion": "Is this part of the corde reading the d3.ns.prefix property?"
    },
    "semanticPatchId": "1857",
    "breakingChangeId": "701",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.namespace($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ns.qualify",
      "unknownAccessPathQuestion": "Is this a call of the ns.qualify method from the d3 package?"
    },
    "semanticPatchId": "1858",
    "breakingChangeId": "701",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.{attrs,styles,properties}",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle (or the new d3-selection package) you now also need to import d3-selection-multi. An alternative to adding this additional import would be to split the call into multiple calls. So instead of $prop() you use multiple [properties=> property,attrs=> attr,styles=> style]() calls. For an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either of the selection.attrs(), selection.styles() or selection.properties() methods from the d3 package?"
    },
    "semanticPatchId": "1859",
    "breakingChangeId": "702",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1859",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-21T15:01:10.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.{attrs,styles,properties}",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle (or the new d3-selection package) you now also need to import d3-selection-multi. \nAn alternative to adding this additional import would be to split the call into multiple calls. So instead of $prop() you would use multiple [properties=> property,attrs=> attr,styles=> style]() calls. \nFor an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either of the selection.attrs(), selection.styles() or selection.properties() methods from the d3 package?"
    },
    "semanticPatchId": "1859",
    "breakingChangeId": "702",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1859",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-21T15:01:36.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.{attrs,styles,properties}",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle (or the new d3-selection package) you now also need to import d3-selection-multi. \nAn alternative to adding this additional import would be to split the call into multiple calls. So instead of $prop() you would use multiple $prop[properties=> property,attrs=> attr,styles=> style]() calls. \nFor an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either of the selection.attrs(), selection.styles() or selection.properties() methods from the d3 package?"
    },
    "semanticPatchId": "1859",
    "breakingChangeId": "702",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.$prop($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.{line,area,arc,symbol,symbolTypes}",
      "unknownAccessPathQuestion": "Is this a call of one of the d3.svg methods?"
    },
    "semanticPatchId": "1860",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1860",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T12:30:21.000Z",
      "primaryTemplate": {
        "pattern": "$base:base.$prop($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.{line,area,arc,symbol}",
      "unknownAccessPathQuestion": "Is this a call of one of the d3.svg methods?"
    },
    "semanticPatchId": "1860",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.$prop",
        "replacements": []
      },
      "detectionPattern": "read <d3>.svg.symbolTypes",
      "unknownAccessPathQuestion": "Is this reading the svg.symbolTypes property from the d3 package?"
    },
    "semanticPatchId": "1861",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base.$prop($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.{pie,stack}",
      "unknownAccessPathQuestion": "Is this the call of either the layout.pie or layout.stack method from the d3 package?"
    },
    "semanticPatchId": "1862",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base:base:base.$base:base:prop[line=> radialLine,area=> radialArea]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.{line,area}.radial",
      "unknownAccessPathQuestion": "Is this the call of either the svg.line.radial() or the svg.area.radial method from the d3 package?"
    },
    "semanticPatchId": "1863",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1863",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T12:37:16.000Z",
      "primaryTemplate": {
        "pattern": "$base:base:base.$base:prop[line=> radialLine,area=> radialArea]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.{line,area}.radial",
      "unknownAccessPathQuestion": "Is this the call of either the svg.line.radial() or the svg.area.radial method from the d3 package?"
    },
    "semanticPatchId": "1863",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.curve($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.svg.{area,line}()**.interpolate",
      "unknownAccessPathQuestion": "Is this the call of either of the svg.area.interpolate or the svg.line.interpolate methods from the d3 package?"
    },
    "semanticPatchId": "1864",
    "breakingChangeId": "703",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.{area,line}()**.interpolate [1,1]",
      "suggestedFixDescription": "Instead of $1 you should now use the $1[linear=> d3.curveLinear,linear-closed=> d3.curveLinearClosed,step=> d3.curveStep,step-before=> d3.curveStepBefore,step-after=> d3.curveStepAfter,basis=> d3.curveBasis,basis-open=> d3.curveBasisOpen,basis-closed=> d3.curveBasisClosed,bundle=> d3.curveBundle,cardinal=> d3.curveCardinal,cardinal-open=> d3.curveCardinalOpen,cardinal-closed=> d3.curveCardinalClosed,monotone=> d3.curveMonotoneX]() function. The functionality should be identical to the old version. For more information on $1[linear=> d3.curveLinear,linear-closed=> d3.curveLinearClosed,step=> d3.curveStep,step-before=> d3.curveStepBefore,step-after=> d3.curveStepAfter,basis=> d3.curveBasis,basis-open=> d3.curveBasisOpen,basis-closed=> d3.curveBasisClosed,bundle=> d3.curveBundle,cardinal=> d3.curveCardinal,cardinal-open=> d3.curveCardinalOpen,cardinal-closed=> d3.curveCardinalClosed,monotone=> d3.curveMonotoneX]() see: \nhttps://github.com/d3/d3-shape/blob/main/README.md#$1[linear=> d3.curveLinear,linear-closed=> d3.curveLinearClosed,step=> d3.curveStep,step-before=> d3.curveStepBefore,step-after=> d3.curveStepAfter,basis=> d3.curveBasis,basis-open=> d3.curveBasisOpen,basis-closed=> d3.curveBasisClosed,bundle=> d3.curveBundle,cardinal=> d3.curveCardinal,cardinal-open=> d3.curveCardinalOpen,cardinal-closed=> d3.curveCardinalClosed,monotone=> d3.curveMonotoneX]",
      "unknownAccessPathQuestion": "Is this the call of either the svg.area.interpolate or the svg.line.interpolate method from the d3 package?"
    },
    "semanticPatchId": "1865",
    "breakingChangeId": "704",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1865",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T13:06:49.000Z",
      "detectionPattern": "call <d3>.svg.{area,line}()**.interpolate [1,1]",
      "suggestedFixDescription": "Instead of $1 you should now use the new equivalent functions found here:\nhttps://github.com/d3/d3/blob/main/CHANGES.md#shapes-d3-shape. \nThe functionality should be identical to the old version. For more information on each of the new methods see: \nhttps://github.com/d3/d3-shape/blob/main/README.md#curves ",
      "unknownAccessPathQuestion": "Is this the call of either the svg.area.interpolate or the svg.line.interpolate method from the d3 package?"
    },
    "semanticPatchId": "1865",
    "breakingChangeId": "704",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.line()**.tension [1,1]",
      "suggestedFixDescription": "The fix for this change depends on whether the line is in cardinal mode or the bundle mode.\nIf the mode is “cardinal”, “cardinal-open” or “cardinal-closed”: Use the cardinal.tension($1) method inside the new curve constructor.. See: https://devdocs.io/d3~4/d3-shape#curveCardinal_tension\nIf the mode is “bundle”: Use the bundle.beta($1) method inside the new curve constructor. See: https://devdocs.io/d3~4/d3-shape#curveBundle_beta",
      "unknownAccessPathQuestion": "Is this a call of the line.tension method from the d3 package?"
    },
    "semanticPatchId": "1866",
    "breakingChangeId": "705",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1866",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T15:03:19.000Z",
      "detectionPattern": "call <d3>.svg.line()**.tension [1,1]",
      "suggestedFixDescription": "The fix for this change depends on whether the line is in cardinal mode or the bundle mode.\nIf the mode is “cardinal”, “cardinal-open” or “cardinal-closed”: Use the cardinal.tension($1) method inside the new curve constructor. See: https://devdocs.io/d3~4/d3-shape#curveCardinal_tension\nIf the mode is “bundle”: Use the bundle.beta($1) method inside the new curve constructor. See: https://devdocs.io/d3~4/d3-shape#curveBundle_beta",
      "unknownAccessPathQuestion": "Is this a call of the line.tension method from the d3 package?"
    },
    "semanticPatchId": "1866",
    "breakingChangeId": "705",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.line()**.tension [0,0]",
      "suggestedFixDescription": "If you at any point in time need to access the value of the tension property and can’t hardcode this value,. you can keep track of this yourself with a parameter, changing it when you use the .tension() method in setter mode. If you are not changing the tension value at any point, the method will return 0 and this value can be hardcoded.",
      "unknownAccessPathQuestion": "Is this a call of the line.tension method from the d3 package?"
    },
    "semanticPatchId": "1867",
    "breakingChangeId": "706",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1867",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T15:08:21.000Z",
      "detectionPattern": "call <d3>.svg.line()**.tension [0,0]",
      "suggestedFixDescription": "If you at any point in time need to access the value of the tension property and can’t hardcode this value, you can keep track of this yourself with a parameter, changing it when you use the .tension() method in setter mode. \nIf you are not changing the tension value at any point, the method will return 0 and this value can be hardcoded.",
      "unknownAccessPathQuestion": "Is this a call of the line.tension method from the d3 package?"
    },
    "semanticPatchId": "1867",
    "breakingChangeId": "706",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.line()**.interpolate [1,1]",
      "suggestedFixDescription": "This is only breaking if $1 is one of the cardinal modes or the bundle mode AND if you use the default value, meaning you're not using the line.tension() method later on to change the cardinal spline tension parameter. If this is breaking for you, you can add cardinal.tension(0.7) or bundle.beta(0.7) to the declaring of mode inside the .interpolate() method, depending on if you are using a cardinal mode or bundle mode. \nFor an example of the cardinal.tension method see: https://devdocs.io/d3~4/d3-shape#curveCardinal_tension",
      "unknownAccessPathQuestion": "Is this a call of the line.interpolate from the d3 package?"
    },
    "semanticPatchId": "1868",
    "breakingChangeId": "707",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1868",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-22T15:12:13.000Z",
      "detectionPattern": "call <d3>.svg.line()**.interpolate [1,1]",
      "suggestedFixDescription": "This is only breaking if $1 is one of the cardinal modes or the bundle mode AND if you use the default value, meaning you're not using the line.tension() method later on to change the cardinal spline tension parameter. If this is breaking for you, you can add cardinal.tension(0.7) or bundle.beta(0.7) to the declaring of mode inside the .interpolate() method, depending on if you are using a cardinal mode or bundle mode. \nFor an example of the cardinal.tension method see: https://devdocs.io/d3~4/d3-shape#curveCardinal_tension",
      "unknownAccessPathQuestion": "Is this a call of the line.interpolate from the d3 package?"
    },
    "semanticPatchId": "1868",
    "breakingChangeId": "707",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.svg.symbol()**.type [1,1] 0:string",
      "suggestedFixDescription": "To accommodate this change you have to change the string $1 to the equivalent type from the new symbol type API:\n“circle” ↦ d3.symbolCircle\n“cross” ↦ d3.symbolCross\n“diamond” ↦ d3.symbolDiamond\n“square” ↦ d3.symbolSquare\n“triangle-up” ↦ d3.symbolTriangle",
      "unknownAccessPathQuestion": "Is this a call of the svg.symbol().type method from the d3 package?"
    },
    "semanticPatchId": "1869",
    "breakingChangeId": "708",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "primaryTemplate": {
        "pattern": "<d3>.stack($args);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.stack",
      "unknownAccessPathQuestion": "Is this a call of the d3.layout.stack constructor?"
    },
    "semanticPatchId": "1870",
    "breakingChangeId": "709",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.value($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.layout.stack()**.values",
      "unknownAccessPathQuestion": "Is this a call of the stack.values method from the d3 package?"
    },
    "semanticPatchId": "1871",
    "breakingChangeId": "710",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.stack()**.{x,y}",
      "suggestedFixDescription": "Telling the stack how to access the $prop coordinate is no longer needed for it to function, hence the .$prop() method has been removed. To fix this breaking change simply remove the call, which should not result in any functional change.",
      "unknownAccessPathQuestion": "Is this a call of either the stack.x or stack.y method from the d3 package?"
    },
    "semanticPatchId": "1872",
    "breakingChangeId": "711",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.layout.stack()**.out",
      "suggestedFixDescription": "Stack generators no longer modify the input data, hence telling the stack how to propagate the new calculated baselines to above layers is no longer needed. This means that d3 has removed the .out() method. To fix this breaking change simply remove the call, which should not result in any functional change.",
      "unknownAccessPathQuestion": "Is this a call of the stack.out method from the d3 package?"
    },
    "semanticPatchId": "1873",
    "breakingChangeId": "712",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "primaryTemplate": {
        "pattern": "<d3>.timeFormat($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.format",
      "unknownAccessPathQuestion": "Is this a constructor call of the time.format class from the d3 package?"
    },
    "semanticPatchId": "1874",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[utc=> utcFormat,iso=> isoFormat]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.format.{utc,iso}",
      "unknownAccessPathQuestion": "Is this a call of either the time.format.utc method or the time.format.iso method from the d3 package?"
    },
    "semanticPatchId": "1875",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.time.format().parse",
      "unknownAccessPathQuestion": "Is this a call of the time.format.parse method from the d3 package?"
    },
    "semanticPatchId": "1876",
    "breakingChangeId": "713",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1876",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-23T09:23:52.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.timeParse($base:prop:1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.format().parse",
      "unknownAccessPathQuestion": "Is this a call of the time.format.parse method from the d3 package?"
    },
    "semanticPatchId": "1876",
    "breakingChangeId": "713",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1876",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-23T09:24:04.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.timeParse($base:1)($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.format().parse",
      "unknownAccessPathQuestion": "Is this a call of the time.format.parse method from the d3 package?"
    },
    "semanticPatchId": "1876",
    "breakingChangeId": "713",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[utc=> utcParse,iso=> isoParse]($base:1)($1)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.format.{utc,iso}().parse",
      "unknownAccessPathQuestion": "Is this a call of either the time.format.utc.parse method or the time.format.iso.parse method from the d3 package?"
    },
    "semanticPatchId": "1877",
    "breakingChangeId": "713",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.time.format.multi",
      "suggestedFixDescription": "To use d3.scaleTimes tickFormat() method instead of .multi(), takes a few extra steps. \n1. To create the formatter you first need to create a scale with time stamps on it, using the d3.scaleTime() constructor. \n2. This scaleTime class has two methods you will need; .domain(date, date) and .range(int). The domain needs the first and last date of all the dates the formatter should be able to format and the range needs to be the interval between each value. \n3. Use the scaleTime.tickFormat(count, specifier) method to declare the custom format. The count argument does nothing, and you can set this to 0. It’s only used for consistency with other scales than the timeScale. The interval should be identical to $1 for you to get the same functionality.\nE.g. If I want a formatter for days in a specific year i would use something like:\nconst formatter = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 12, 31)])\n    .range([0, 365]);",
      "unknownAccessPathQuestion": "Is this a call of the time.format.multi method from the d3 package?"
    },
    "semanticPatchId": "1878",
    "breakingChangeId": "714",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.time.format.{utc,iso}.multi",
      "suggestedFixDescription": "To use d3.scaleTimes tickFormat() method instead of .multi(), takes a few extra steps. \n1. To create the formatter you first need to create a scale with time stamps on it, using the d3.scaleTime() constructor. \n2. This scaleTime class has two methods you will need; .domain(date, date) and .range(int). The domain needs the first and last date of all the dates the formatter should be able to format and the range needs to be the interval between each value. \n3. Use the scaleTime.tickFormat(count, specifier) method to declare the custom format. The count argument does nothing, and you can set this to 0. It’s only used for consistency with other scales than the timeScale. The interval should be identical to $1 for you to get the same functionality.\nE.g. If I want a formatter for days in a specific year i would use something like:\nconst formatter = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 12, 31)])\n    .range([0, 365]);",
      "unknownAccessPathQuestion": "Is this a call of either the time.format.utc.multi method or the time.format.iso.multi method from the d3 package?"
    },
    "semanticPatchId": "1879",
    "breakingChangeId": "714",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.locale().timeFormat.multi",
      "suggestedFixDescription": "To use d3.scaleTimes tickFormat() method instead of .multi(), takes a few extra steps. \n1. To create the formatter you first need to create a scale with time stamps on it, using the d3.scaleTime() constructor. \n2. This scaleTime class has two methods you will need; .domain(date, date) and .range(int). The domain needs the first and last date of all the dates the formatter should be able to format and the range needs to be the interval between each value. \n3. Use the scaleTime.tickFormat(count, specifier) method to declare the custom format. The count argument does nothing, and you can set this to 0. It’s only used for consistency with other scales than the timeScale. The interval should be identical to $1 for you to get the same functionality.\nE.g. If I want a formatter for days in a specific year i would use something like:\nconst formatter = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 12, 31)])\n    .range([0, 365]);",
      "unknownAccessPathQuestion": "Is this a call of the locale().timeFormat.multi method from the d3 package?"
    },
    "semanticPatchId": "1880",
    "breakingChangeId": "714",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.locale().timeFormat.utc.multi",
      "suggestedFixDescription": "To use d3.scaleTimes tickFormat() method instead of .multi(), takes a few extra steps. \n1. To create the formatter you first need to create a scale with time stamps on it, using the d3.scaleTime() constructor. \n2. This scaleTime class has two methods you will need; .domain(date, date) and .range(int). The domain needs the first and last date of all the dates the formatter should be able to format and the range needs to be the interval between each value. \n3. Use the scaleTime.tickFormat(count, specifier) method to declare the custom format. The count argument does nothing, and you can set this to 0. It’s only used for consistency with other scales than the timeScale. The interval should be identical to $1 for you to get the same functionality.\nE.g. If I want a formatter for days in a specific year i would use something like:\nconst formatter = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 12, 31)])\n    .range([0, 365]);",
      "unknownAccessPathQuestion": "Is this a call of the locale().timeFormat.utc.multi method from the d3 package?"
    },
    "semanticPatchId": "1881",
    "breakingChangeId": "714",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.time.foo ↦ d3.timeFoo",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[second=> timeSecond,minute=> timeMinute,hour=> timeHour,day=> timeDay,sunday=> timeSunday,monday=> timeMonday,tuesday=> timeTuesday,wednesday=> timeWednesday,thursday=> timeThursday,friday=> timeFriday,saturday=> timeSaturday,week=> timeWeek,month=> timeMonth,year=> timeYear,seconds=> timeSeconds,minutes=> timeMinutes,hours=> timeHours,days=> timeDays,sundays=> timeSundays,mondays=> timeMondays,tuesdays=> timeTuesdays,wednesdays=> timeWednesdays,thursdays=> timeThursdays,fridays=> timeFridays,saturdays=> timeSaturdays,weeks=> timeWeeks,months=> timeMonths,years=> timeYears]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year,seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years}",
      "unknownAccessPathQuestion": "Is this a read of one of the local time intervals from the d3 package?"
    },
    "semanticPatchId": "1882",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.time.foo ↦ d3.timeFoo"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "d3.time.foo.utc ↦ d3.utcFoo",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[second=> utcSecond,minute=> utcMinute,hour=> utcHour,day=> utcDay,sunday=> utcSunday,monday=> utcMonday,tuesday=> utcTuesday,wednesday=> utcWednesday,thursday=> utcThursday,friday=> utcFriday,saturday=> utcSaturday,week=> utcWeek,month=> utcMonth,year=> utcYear]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}\n.utc",
      "unknownAccessPathQuestion": "Is this a read of the utc time intervals or a call of the utc time range aliases from the d3 package?"
    },
    "semanticPatchId": "1883",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.time.foo.utc ↦ d3.utcFoo"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1883",
      "comment": "d3.time.foo.utc ↦ d3.utcFoo ",
      "version": 0,
      "creationDate": "2022-10-25T03:53:45.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[second=> utcSecond,minute=> utcMinute,hour=> utcHour,day=> utcDay,sunday=> utcSunday,monday=> utcMonday,tuesday=> utcTuesday,wednesday=> utcWednesday,thursday=> utcThursday,friday=> utcFriday,saturday=> utcSaturday,week=> utcWeek,month=> utcMonth,year=> utcYear,seconds=> utcSeconds,minutes=> utcMinutes,hours=> utcHours,days=> utcDays,sundays=> utcSundays,mondays=> utcMondays,tuesdays=> utcTuesdays,wednesdays=> utcWednesdays,thursdays=> utcThursdays,fridays=> utcFridays,saturdays=> utcSaturdays,weeks=> utcWeeks,months=> utcMonths,years=> utcYears]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year,seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years}.utc",
      "unknownAccessPathQuestion": "Is this a read of the utc time intervals or a call of the utc time range aliases from the d3 package?"
    },
    "semanticPatchId": "1883",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.time.foo.utc ↦ d3.utcFoo "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1882",
      "comment": "d3.time.foo ↦ d3.timeFoo ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-25T03:46:38.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[second=> timeSecond,minute=> timeMinute,hour=> timeHour,day=> timeDay,sunday=> timeSunday,monday=> timeMonday,tuesday=> timeTuesday,wednesday=> timeWednesday,thursday=> timeThursday,friday=> timeFriday,saturday=> timeSaturday,week=> timeWeek,month=> timeMonth,year=> timeYear]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}",
      "unknownAccessPathQuestion": "Is this a read of one of the local time intervals from the d3 package?"
    },
    "semanticPatchId": "1882",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.time.foo ↦ d3.timeFoo "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[seconds=> timeSeconds,minutes=> timeMinutes,hours=> timeHours,days=> timeDays,sundays=> timeSundays,mondays=> timeMondays,tuesdays=> timeTuesdays,wednesdays=> timeWednesdays,thursdays=> timeThursdays,fridays=> timeFridays,saturdays=> timeSaturdays,weeks=> timeWeeks,months=> timeMonths,years=> timeYears]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years}",
      "unknownAccessPathQuestion": "Is this a call of on of the interval.range aliases from the d3 package?"
    },
    "semanticPatchId": "1884",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1884",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-25T04:29:33.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[seconds=> timeSeconds,minutes=> timeMinutes,hours=> timeHours,days=> timeDays,sundays=> timeSundays,mondays=> timeMondays,tuesdays=> timeTuesdays,wednesdays=> timeWednesdays,thursdays=> timeThursdays,fridays=> timeFridays,saturdays=> timeSaturdays,weeks=> timeWeeks,months=> timeMonths,years=> timeYears]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of on of the interval.range aliases from the d3 package?"
    },
    "semanticPatchId": "1884",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1884",
      "comment": "Initial  ",
      "version": 1,
      "creationDate": "2022-10-25T04:30:11.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[seconds=> timeSeconds,minutes=> timeMinutes,hours=> timeHours,days=> timeDays,sundays=> timeSundays,mondays=> timeMondays,tuesdays=> timeTuesdays,wednesdays=> timeWednesdays,thursdays=> timeThursdays,fridays=> timeFridays,saturdays=> timeSaturdays,weeks=> timeWeeks,months=> timeMonths,years=> timeYears]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of on of the interval.range aliases from the d3 package?"
    },
    "semanticPatchId": "1884",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1883",
      "comment": "d3.time.foo.utc ↦ d3.utcFoo",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-10-25T04:00:18.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[second=> utcSecond,minute=> utcMinute,hour=> utcHour,day=> utcDay,sunday=> utcSunday,monday=> utcMonday,tuesday=> utcTuesday,wednesday=> utcWednesday,thursday=> utcThursday,friday=> utcFriday,saturday=> utcSaturday,week=> utcWeek,month=> utcMonth,year=> utcYear]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}.utc",
      "unknownAccessPathQuestion": "Is this a read of the utc time intervals from the d3 package?"
    },
    "semanticPatchId": "1883",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "d3.time.foo.utc ↦ d3.utcFoo"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[seconds=> utcSeconds,minutes=> utcMinutes,hours=> utcHours,days=> utcDays,sundays=> utcSundays,mondays=> utcMondays,tuesdays=> utcTuesdays,wednesdays=> utcWednesdays,thursdays=> utcThursdays,fridays=> utcFridays,saturdays=> utcSaturdays,weeks=> utcWeeks,months=> utcMonths,years=> utcYears]($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years}.utc [2,2]",
      "unknownAccessPathQuestion": "Is this a call of one of the time.utc time range aliases from the d3 package?"
    },
    "semanticPatchId": "1885",
    "breakingChangeId": "597",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[seconds=> timeSecond,minutes=> timeMinute,hours=> timeHour,days=> timeDay,sundays=> timeSunday,mondays=> timeMonday,tuesdays=> timeTuesday,wednesdays=> timeWednesday,thursdays=> timeThursday,fridays=> timeFriday,saturdays=> timeSaturday,weeks=> timeWeek,months=> timeMonth,years=> timeYear]($args).every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years} [3,3]",
      "unknownAccessPathQuestion": "Is this a call of one of the local time range aliases from the d3 package?"
    },
    "semanticPatchId": "1886",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1886",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-25T06:33:47.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[seconds=> timeSecond,minutes=> timeMinute,hours=> timeHour,days=> timeDay,sundays=> timeSunday,mondays=> timeMonday,tuesdays=> timeTuesday,wednesdays=> timeWednesday,thursdays=> timeThursday,fridays=> timeFriday,saturdays=> timeSaturday,weeks=> timeWeek,months=> timeMonth,years=> timeYear].every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years} [3,3]",
      "unknownAccessPathQuestion": "Is this a call of one of the local time range aliases from the d3 package?"
    },
    "semanticPatchId": "1886",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.on($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.transition()**.each [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the transition.each method from the d3 package?"
    },
    "semanticPatchId": "1899",
    "breakingChangeId": "722",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[seconds=> utcSecond,minutes=> utcMinute,hours=> utcHour,days=> utcDay,sundays=> utcSunday,mondays=> utcMonday,tuesdays=> utcTuesday,wednesdays=> utcWednesday,thursdays=> utcThursday,fridays=> utcFriday,saturdays=> utcSaturday,weeks=> utcWeek,months=> utcMonth,years=> utcYear].every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{seconds,minutes,hours,days,sundays,mondays,tuesdays,wednesdays,thursdays,fridays,saturdays,weeks,months,years}.utc [3,3]",
      "unknownAccessPathQuestion": "Is this a call of one of the UTC time range aliases from the d3 package?"
    },
    "semanticPatchId": "1887",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[second=> timeSecond,minute=> timeMinute,hour=> timeHour,day=> timeDay,sunday=> timeSunday,monday=> timeMonday,tuesday=> timeTuesday,wednesday=> timeWednesday,thursday=> timeThursday,friday=> timeFriday,saturday=> timeSaturday,week=> timeWeek,month=> timeMonth,year=> timeYear].every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}.range [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the interval.range method from the d3 package?"
    },
    "semanticPatchId": "1888",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:base:prop[second=> timeSecond,minute=> timeMinute,hour=> timeHour,day=> timeDay,sunday=> timeSunday,monday=> timeMonday,tuesday=> timeTuesday,wednesday=> timeWednesday,thursday=> timeThursday,friday=> timeFriday,saturday=> timeSaturday,week=> timeWeek,month=> timeMonth,year=> timeYear].every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}.utc.range [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the interval.range method from the d3 package?"
    },
    "semanticPatchId": "1889",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1889",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-25T06:46:04.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.$base:base:prop[second=> utcSecond,minute=> utcMinute,hour=> utcHour,day=> utcDay,sunday=> utcSunday,monday=> utcMonday,tuesday=> utcTuesday,wednesday=> utcWednesday,thursday=> utcThursday,friday=> utcFriday,saturday=> utcSaturday,week=> utcWeek,month=> utcMonth,year=> utcYear].every($3).range($1,$2);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{second,minute,hour,day,sunday,monday,tuesday,wednesday,thursday,friday,saturday,week,month,year}.utc.range [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the interval.range method from the d3 package?"
    },
    "semanticPatchId": "1889",
    "breakingChangeId": "716",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$prop[dayOfYear=> timeDay,sundayOfYear=> timeSunday,mondayOfYear=> timeMonday,tuesdayOfYear=> timeTuesday,wednesdayOfYear=> timeWednesday,thursdayOfYear=> timeThursday,fridayOfYear=> timeFriday,saturdayOfYear=> timeSaturday,weekOfYear=> timeWeek].count(<d3>.timeYear($1),$1);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{dayOfYear,mondayOfYear,tuesdayOfYear,wednesdayOfYear,thursdayOfYear,fridayOfYear,saturdayOfYear,sundayOfYear,weekOfYear}",
      "unknownAccessPathQuestion": "Is this a call of one of the `time.dayOfYear`-related methods from the d3 package?"
    },
    "semanticPatchId": "1890",
    "breakingChangeId": "717",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.$base:prop[dayOfYear=> utcDay,sundayOfYear=> utcSunday,mondayOfYear=> utcMonday,tuesdayOfYear=> utcTuesday,wednesdayOfYear=> utcWednesday,thursdayOfYear=> utcThursday,fridayOfYear=> utcFriday,saturdayOfYear=> utcSaturday,weekOfYear=> utcWeek].count(<d3>.timeYear($1),$1);",
        "replacements": []
      },
      "detectionPattern": "call <d3>.time.{dayOfYear,mondayOfYear,tuesdayOfYear,wednesdayOfYear,thursdayOfYear,fridayOfYear,saturdayOfYear,sundayOfYear,weekOfYear}.utc",
      "unknownAccessPathQuestion": "Is this a call of one of the `ttime.dayOfYear.utc`-related methods from the d3 package?"
    },
    "semanticPatchId": "1891",
    "breakingChangeId": "717",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.timer",
      "suggestedFixDescription": "The new stop() method has to be called on the same timer that you want to stop. This means you will have to declare it. \nPreviously when you wanted to stop a timer, you would make sure the callback would return true at some point. Instead of doing this, you can now use an if-statement, that when true calls the stop() method.\nFor instance instead of:\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed >= 1000;\n});\nyou would now use an if statement and the timer.stop() method like:\nlet t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed >= 1000) {\n    t.stop();\n  }\n});",
      "unknownAccessPathQuestion": "Is this a call of the timer method from the d3 package?"
    },
    "semanticPatchId": "1892",
    "breakingChangeId": "718",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1892",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-10-25T07:32:49.000Z",
      "detectionPattern": "call <d3>.timer",
      "suggestedFixDescription": "The new stop() method has to be called on the same timer that you want to stop. This means you will have to declare it. \nPreviously when you wanted to stop a timer, you would make sure the callback would return true at some point. Instead of doing this, you can now use an if-statement, that when true calls the stop() method.\nFor instance instead of:\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed >= 1000;\n});\nyou would now declare the timer, use an if statement and the timer.stop() method like:\nlet t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed >= 1000) {\n    t.stop();\n  }\n});",
      "unknownAccessPathQuestion": "Is this a call of the timer method from the d3 package?"
    },
    "semanticPatchId": "1892",
    "breakingChangeId": "718",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transition()**.delay",
      "suggestedFixDescription": "If you have several .delay() calls in a chain of .transition() calls, you will have to change the value of these delays, to get the current functionality.\nFor instance if you in version 3.x had some transitions like:\nd3.selectAll(\".apple\")\n  .transition() \n    .delay(1000)\n    .style(\"fill\", \"green\")\n  .transition() // turn red 0.5s after the green style was applied.\n    .delay(1500)\n    .style(\"fill\", \"red\")\nIn 4.0 the red style would be applied 1.5s. after the green style, and not 0.5s. like in version 3.x",
      "unknownAccessPathQuestion": "Is this a call of the transition.delay method from the d3 package?"
    },
    "semanticPatchId": "1900",
    "breakingChangeId": "723",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}.transition()**.delay",
      "suggestedFixDescription": "If you have several .delay() calls in a chain of .transition() calls, you will have to change the value of these delays, to get the current functionality.\nFor instance if you in version 3.x had some transitions like:\nd3.selectAll(\".apple\")\n  .transition() \n    .delay(1000)\n    .style(\"fill\", \"green\")\n  .transition() // turn red 0.5s after the green style was applied.\n    .delay(1500)\n    .style(\"fill\", \"red\")\nIn 4.0 the red style would be applied 1.5s. after the green style, and not 0.5s. like in version 3.x",
      "unknownAccessPathQuestion": "Is this a call of a selection.transition.delay method from the d3 package?"
    },
    "semanticPatchId": "1901",
    "breakingChangeId": "723",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1901",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-26T04:54:36.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.delay",
      "suggestedFixDescription": "If you have several .delay() calls in a chain of .transition() calls, you will have to change the value of these delays, to get the current functionality.\nFor instance if you in version 3.x had some transitions like:\nd3.selectAll(\".apple\")\n  .transition() \n    .delay(1000)\n    .style(\"fill\", \"green\")\n  .transition() // turn red 0.5s after the green style was applied.\n    .delay(1500)\n    .style(\"fill\", \"red\")\nIn 4.0 the red style would be applied 1.5s. after the green style, and not 0.5s. like in version 3.x",
      "unknownAccessPathQuestion": "Is this a call of a selection.transition.delay method from the d3 package?"
    },
    "semanticPatchId": "1901",
    "breakingChangeId": "723",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "primaryTemplate": {
        "pattern": "$base.on($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.each [2,2]",
      "unknownAccessPathQuestion": "Is this a call of a selection.transition.each method?"
    },
    "semanticPatchId": "1902",
    "breakingChangeId": "722",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.interrupt",
      "suggestedFixDescription": "For most people this new behavior will actually be what they intended to happen in the first place. \nPreviously transitions not yet started due to an added delay would not be interrupted by the .interrupt() method, but this is no longer the case. \nThere is no good replacement method for the old functionality, and the easiest way to keep the scheduled tasks would be to reschedule them after interrupting the current task.",
      "unknownAccessPathQuestion": "Is this a method call of the selection.interrupt method from the d3 package?"
    },
    "semanticPatchId": "1904",
    "breakingChangeId": "725",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transition()**.duration",
      "suggestedFixDescription": "This change only has the potential to be breaking if the transition you are setting the duration for already exists and has been applied to a selection. One way to be sure this call will not throw an exception is to use the selection.interrupt() method on every element on which this transition is applied. This would make sure the transition is not running before the duration is changed.",
      "unknownAccessPathQuestion": "Is this a call of the transition.duration method from the d3 package?"
    },
    "semanticPatchId": "1905",
    "breakingChangeId": "726",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.duration",
      "suggestedFixDescription": "This change only has the potential to be breaking if the transition you are setting the duration for already exists and has been applied to a selection. One way to be sure this call will not throw an exception is to use the selection.interrupt() method on every element on which this transition is applied. This would make sure the transition is not running before the duration is changed.",
      "unknownAccessPathQuestion": "Is this a call of the selection.transition.duration method from the d3 package?"
    },
    "semanticPatchId": "1906",
    "breakingChangeId": "726",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.ease(d3.$1[linear=>easeLinear]($2))",
        "replacements": []
      },
      "detectionPattern": "call <d3>.transition()**.ease [1,2]",
      "unknownAccessPathQuestion": "Is this a call of the transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1907",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transition()**.attrTween",
      "suggestedFixDescription": "This is only breaking if you are using the `a` reference in $2. As a solution, instead of `a` you can use the `this` reference together with the `getAttribute` method. This would look something like:\n`this.getAttribute($1)`\nFor more details on the new $prop method see:\nhttps://devdocs.io/d3~4/d3-transition#transition_$prop",
      "unknownAccessPathQuestion": "Is this a call of the transition.attrTween method from the d3 package?"
    },
    "semanticPatchId": "1908",
    "breakingChangeId": "728",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.attrTween",
      "suggestedFixDescription": "This is only breaking if you are using the `a` reference in $2. As a solution, instead of `a` you can use the `this` reference together with the `getAttribute` method. This would look something like:\n`this.getAttribute($1)`\nFor more details on the new $prop method see:\nhttps://devdocs.io/d3~4/d3-transition#transition_$prop",
      "unknownAccessPathQuestion": "Is this a call of the selection.transition.attrTween method from the d3 package?"
    },
    "semanticPatchId": "1909",
    "breakingChangeId": "728",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.transition()**.styleTween",
      "suggestedFixDescription": "This is only breaking if you are using the `a` reference in $2. As a solution, instead of `a` you can use the `this` reference together with the `getAttribute` method. This would look something like:\n`this.getAttribute($1)`\nFor more details on the new $prop method see:\nhttps://devdocs.io/d3~4/d3-transition#transition_$prop",
      "unknownAccessPathQuestion": "Is this a call of the transition.styleTween method from the d3 package?"
    },
    "semanticPatchId": "1910",
    "breakingChangeId": "728",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.styleTween",
      "suggestedFixDescription": "This is only breaking if you are using the `a` reference in $2. As a solution, instead of `a` you can use the `this` reference together with the `getAttribute` method. This would look something like:\n`this.getAttribute($1)`\nFor more details on the new $prop method see:\nhttps://devdocs.io/d3~4/d3-transition#transition_$prop",
      "unknownAccessPathQuestion": "Is this a call of the selection.transition.styleTween method from the d3 package?"
    },
    "semanticPatchId": "1911",
    "breakingChangeId": "728",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1859",
      "comment": "Initial ",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-10-21T15:02:50.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.{attr,style,propertie} 1:object",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle (or the new d3-selection package) you now also need to import d3-selection-multi. An alternative to adding this additional import would be to split the call into multiple calls. So instead of parsing the object to $prop() you use multiple $prop() calls. For an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi",
      "unknownAccessPathQuestion": "Is this a call of either of the selection.attr(), selection.style() or selection.propertie() methods from the d3 package?"
    },
    "semanticPatchId": "1859",
    "breakingChangeId": "702",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 4,
    "semanticPatch": {
      "id": "1859",
      "comment": "Initial",
      "enabled": true,
      "version": 3,
      "creationDate": "2022-10-27T05:28:36.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.{attr,style,propertie} 0:object",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle (or the new d3-selection package) you now also need to import d3-selection-multi. An alternative to adding this additional import would be to split the call into multiple calls. So instead of parsing the object to $prop() you use multiple $prop() calls. For an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi",
      "unknownAccessPathQuestion": "Is this a call of either of the selection.attr(), selection.style() or selection.propertie() methods from the d3 package?"
    },
    "semanticPatchId": "1859",
    "breakingChangeId": "702",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}**.transition()**.{attr,style} 0:object",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle you now also need to import d3-selection-multi. An alternative to adding this additional import would be to split the call into multiple calls. So instead of parsing an object to $prop() you use multiple $prop() calls. For an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either the selection.transition.atrr() or the selection.transition.style method from the d3 package?"
    },
    "semanticPatchId": "1912",
    "breakingChangeId": "729",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1912",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-27T05:43:20.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}**.transition()**.{attr,style} 0:object",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle you now also need to import d3-selection-multi. \nAn alternative to adding this additional import would be to split the call into multiple calls. So instead of parsing an object to $prop() you use multiple $prop() calls. \nFor an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either the selection.transition.atrr() or the selection.transition.style method from the d3 package?"
    },
    "semanticPatchId": "1912",
    "breakingChangeId": "729",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial",
      "detectionPattern": "call <d3>.transition()**.{attr,style} 0:object",
      "suggestedFixDescription": "What this means for you is simply that besides the default bundle you now also need to import d3-selection-multi. \nAn alternative to adding this additional import would be to split the call into multiple calls. So instead of parsing an object to $prop() you use multiple $prop() calls. \nFor an example of how this would be done for the .attrs() method see: https://github.com/d3/d3-selection-multi#d3-selection-multi.",
      "unknownAccessPathQuestion": "Is this a call of either the transition.attr() method or the transition.style method from the d3 package?"
    },
    "semanticPatchId": "1913",
    "breakingChangeId": "729",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1907",
      "comment": "Initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-10-26T11:29:33.000Z",
      "detectionPattern": "call <d3>.transition()**.ease [1,2]",
      "suggestedFixDescription": "This means you can no longer parse a string to the .ease() method. Instead of parsing the name of an easing function, you now need to parse the actual easing function. To fix this you should look at $1, go to the list linked at the end of this comment and find the easing function equivalent to your string. \nFor instance, an .ease() call could now look something like:\n`transition.ease(d3.easeLinear());`\nhttps://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease.",
      "unknownAccessPathQuestion": "Is this a call of the transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1907",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1907",
      "comment": "Initial",
      "enabled": true,
      "version": 1,
      "creationDate": "2022-10-27T05:54:30.000Z",
      "detectionPattern": "call <d3>.transition()**.ease [1,2] 0:string",
      "suggestedFixDescription": "This means you can no longer parse a string to the .ease() method. Instead of parsing the name of an easing function, you now need to parse the actual easing function. To fix this you should look at $1, go to the list linked at the end of this comment and find the easing function equivalent to your string. \nFor instance, an .ease() call could now look something like:\n`transition.ease(d3.easeLinear());`\nhttps://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease.",
      "unknownAccessPathQuestion": "Is this a call of the transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1907",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1907",
      "comment": "Initial ",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-10-27T05:54:53.000Z",
      "detectionPattern": "call <d3>.transition()**.ease [1,2] 0:string",
      "suggestedFixDescription": "This means you can no longer parse a string to the .ease() method. Instead of parsing the name of an easing function, you now need to parse the actual easing function. \nTo fix this you should look at $1, go to the list linked at the end of this comment and find the easing function equivalent to your string. \nFor instance, an .ease() call could now look something like:\n`transition.ease(d3.easeLinear());`\nhttps://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease.",
      "unknownAccessPathQuestion": "Is this a call of the transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1907",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.duration [1,2] 0:string",
      "suggestedFixDescription": "his means you can no longer parse a string to the .ease() method. Instead of parsing the name of an easing function, you now need to parse the actual easing function. \nTo fix this you should look at $1, go to the list linked at the end of this comment and find the easing function equivalent to your string. \nFor instance, an .ease() call could now look something like:\n`transition.ease(d3.easeLinear());`\nhttps://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. ",
      "unknownAccessPathQuestion": "Is this a call of the selection.transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1914",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1914",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-27T05:58:21.000Z",
      "detectionPattern": "call <d3>.{select,selectAll}()**.transition()**.ease [1,2] 0:string",
      "suggestedFixDescription": "his means you can no longer parse a string to the .ease() method. Instead of parsing the name of an easing function, you now need to parse the actual easing function. \nTo fix this you should look at $1, go to the list linked at the end of this comment and find the easing function equivalent to your string. \nFor instance, an .ease() call could now look something like:\n`transition.ease(d3.easeLinear());`\nhttps://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. ",
      "unknownAccessPathQuestion": "Is this a call of the selection.transition.ease method from the d3 package?"
    },
    "semanticPatchId": "1914",
    "breakingChangeId": "727",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.voronoi($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi",
      "unknownAccessPathQuestion": "Is this a call of the d3.geom.voronoi method from the d3 package?"
    },
    "semanticPatchId": "1915",
    "breakingChangeId": "730",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.extent($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi()**.clipExtent",
      "unknownAccessPathQuestion": "Is this a call of the geom.voronoi().clipExtent method from the d3 package?"
    },
    "semanticPatchId": "1916",
    "breakingChangeId": "731",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$base.data",
        "replacements": []
      },
      "detectionPattern": "read <d3>.geom.voronoi()**.point",
      "unknownAccessPathQuestion": "Is this reading the point property of a voronoi polygon / cell from the d3 package?"
    },
    "semanticPatchId": "1917",
    "breakingChangeId": "732",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1917",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-28T05:14:37.000Z",
      "primaryTemplate": {
        "pattern": "$base.data",
        "replacements": []
      },
      "detectionPattern": "read <d3>.geom.voronoi**().points",
      "unknownAccessPathQuestion": "Is this reading the point property of a voronoi polygon / cell from the d3 package?"
    },
    "semanticPatchId": "1917",
    "breakingChangeId": "732",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "$callee($args).polygons()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi**()",
      "unknownAccessPathQuestion": "Is this a call of the .voronoi(data) method from the d3 package?"
    },
    "semanticPatchId": "1918",
    "breakingChangeId": "733",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1918",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-28T05:31:52.000Z",
      "primaryTemplate": {
        "pattern": "$callee($args).polygons()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi**()",
      "unknownAccessPathQuestion": "Is this a call of the .voronoi(data) method from the d3 package?"
    },
    "semanticPatchId": "1918",
    "breakingChangeId": "733",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 2,
    "semanticPatch": {
      "id": "1918",
      "comment": "Initial",
      "version": 1,
      "creationDate": "2022-10-28T05:33:47.000Z",
      "primaryTemplate": {
        "pattern": "$callee($args).polygons()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi**()",
      "alternativeTemplate": {
        "pattern": "$callee($args).extent([[ -1e6, -1e6 ], [ 1e6, 1e6 ]]).polygons()",
        "replacements": []
      },
      "transformationQuestion": "Are you explicitly declaring the clipExtent of the polygons returned by $prop?",
      "unknownAccessPathQuestion": "Is this a call of the .voronoi(data) method from the d3 package?"
    },
    "semanticPatchId": "1918",
    "breakingChangeId": "733",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1918",
      "comment": "Initial ",
      "version": 2,
      "creationDate": "2022-10-28T06:04:34.000Z",
      "primaryTemplate": {
        "pattern": "$callee($args).polygons()",
        "replacements": []
      },
      "detectionPattern": "call <d3>.geom.voronoi**()",
      "alternativeTemplate": {
        "pattern": "$callee($args).extent([[ -1e6, -1e6 ], [ 1e6, 1e6 ]]).polygons()",
        "replacements": []
      },
      "transformationQuestion": "Are you explicitly declaring the clipExtent of the polygons returned by voronoi(data)",
      "unknownAccessPathQuestion": "Is this a call of the .voronoi(data) method from the d3 package?"
    },
    "semanticPatchId": "1918",
    "breakingChangeId": "733",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.zoom($args)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.zoom",
      "unknownAccessPathQuestion": "Is this a constructor of a zoom behavior from the d3 package?"
    },
    "semanticPatchId": "1919",
    "breakingChangeId": "734",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.behavior.zoom().event",
      "suggestedFixDescription": "The zoom.event(selection) method was mostly used to dispatch/trigger the zoom events on some selection.\nInstead of doing this with zoom.event, you can do this with selection.call(zoom.event). \nSee this example of the use of selection.call(zoom.event): https://bl.ocks.org/mbostock/9656675\nAnother use of the method is as zoom.event(transition), trying to make sure the zoom gesture triggers events during the transition.\nThis functionality can be achieved using the transition.call(zoom.transform, transform).\nSee this example of the use of transition.call(zoom.transform, transform): https://bl.ocks.org/mbostock/b783fbb2e673561d214e09c7fb5cedee ",
      "unknownAccessPathQuestion": "Is this a call of the behaviour.zoom().event method from the d3 package?"
    },
    "semanticPatchId": "1920",
    "breakingChangeId": "735",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "extraQuestion": "Is this reading the scale property parsed by a zoom event from the d3 package?",
      "primaryTemplate": {
        "pattern": "$base.transform.k",
        "replacements": []
      },
      "detectionPattern": "call <d3>.event.scale",
      "unknownAccessPathQuestion": "Is this reading the scale property parsed by a zoom event from the d3 package?"
    },
    "semanticPatchId": "1921",
    "breakingChangeId": "736",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1921",
      "comment": "Initial",
      "version": 0,
      "creationDate": "2022-10-29T06:15:38.000Z",
      "extraQuestion": "Is this reading the scale property parsed by a zoom event from the d3 package?",
      "primaryTemplate": {
        "pattern": "$base.transform.k",
        "replacements": []
      },
      "detectionPattern": "read <d3>.event.scale",
      "unknownAccessPathQuestion": "Is this reading the scale property parsed by a zoom event from the d3 package?"
    },
    "semanticPatchId": "1921",
    "breakingChangeId": "736",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "primaryTemplate": {
        "pattern": "[$base.transform.x, $base.transform.x]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.event.translate",
      "unknownAccessPathQuestion": "Is this reading the event.translate property parsed to by triggering a zoom event from the d3 package?"
    },
    "semanticPatchId": "1922",
    "breakingChangeId": "737",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1922",
      "comment": "Initial  ",
      "version": 0,
      "creationDate": "2022-10-29T06:58:03.000Z",
      "extraQuestion": "Is this reading the translate property parsed by a zoom event from the d3 package?",
      "primaryTemplate": {
        "pattern": "[$base.transform.x, $base.transform.x]",
        "replacements": []
      },
      "detectionPattern": "read <d3>.event.translate",
      "unknownAccessPathQuestion": "Is this reading the translate property parsed by a zoom event from the d3 package?"
    },
    "semanticPatchId": "1922",
    "breakingChangeId": "737",
    "enabled": true,
    "comment": "Initial  "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.behavior.zoom().center",
      "suggestedFixDescription": "This means that you can no longer set the focal point of the zoom with zoom.center. \nIf this zoom is an automatic animation you can simply choose to start at the focal point and not use .translation(x,y) again, but only use .scale(i). \nIf you are using .center() to keep a point in focal when mouse-wheel zoom is used, you will have to change the behavior of this event by using the `selection.on(\"wheel.zoom\", callback);`, where the listener declares the behavior of mouse-wheel zooming. \nFor an example of how to use the selection.on() method see: https://bl.ocks.org/mbostock/9656675",
      "unknownAccessPathQuestion": "Is this a call of the behavior.zoom().center method from the d3 package?"
    },
    "semanticPatchId": "1923",
    "breakingChangeId": "738",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1923",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-29T07:17:54.000Z",
      "detectionPattern": "call <d3>.behavior.zoom().center",
      "suggestedFixDescription": "This means that you can no longer set the focal point of the zoom with zoom.center. \nIf this zoom is an automatic animation you can simply choose to start at the focal point and not use .translation(x,y) again, but only use .scale(i). \nIf you are using .center() to keep a point in focal when mouse-wheel zoom is used, you will have to change the behavior of this event by using the `selection.on(\"wheel.zoom\", listener);`, where the listener declares the behavior of mouse-wheel zooming. \nFor an example of how to use the selection.on() method see: https://bl.ocks.org/mbostock/9656675",
      "unknownAccessPathQuestion": "Is this a call of the behavior.zoom().center method from the d3 package?"
    },
    "semanticPatchId": "1923",
    "breakingChangeId": "738",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "This is only breaking if you are using the default zoom size, meaning you are never calling the zoom.size() method with any arguments.\nThe default value has changed from being [960, 500] to now be the [[x0, y0], [width, height]] where (x0, y0) is the upper left corner of the parent element and width and height is the size of the parent element. \nThe quick fix for this would simply be to hardcode the [960, 500] value, which would achieve the old behavior.",
        "replacements": []
      },
      "detectionPattern": "call <d3>.behavior.zoom()**.size [0,0]",
      "unknownAccessPathQuestion": "Is this a call of the zoom.size method from the d3 package?"
    },
    "semanticPatchId": "1924",
    "breakingChangeId": "739",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1924",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-30T08:16:29.000Z",
      "detectionPattern": "call <d3>.behavior.zoom()**.size [0,0]",
      "suggestedFixDescription": "This is only breaking if you are using the default zoom size, meaning you are never calling the zoom.size() method with any arguments.\nThe default value has changed from being [960, 500] to now be the [[x0, y0], [width, height]] where (x0, y0) is the upper left corner of the parent element and width and height is the size of the parent element. \nThe quick fix for this would simply be to hardcode the [960, 500] value, which would achieve the old behavior.",
      "unknownAccessPathQuestion": "Is this a call of the zoom.size method from the d3 package?"
    },
    "semanticPatchId": "1924",
    "breakingChangeId": "739",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "detectionPattern": "call <d3>.behavior.zoom()**.size [2,2]",
      "suggestedFixDescription": "The zoom.size([width, height]) method has been renamed to zoom.extent([[x0,y0],[x1,y1]]). \nYou should change the name and then depending on what svg selection/element this zoom behavior is associated with you have to change the argument accordingly.\nIf the svg selection has a parent element with a viewbox (selection.ownerSVGElement.hasAttribute(\"viewBox\")) you should use the parents upper corner as the [x0,y0] coordinate and the width and height of the parent element as [x1,y1]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L21-L23. \nIf the svg selection has a parent, but this parent has no viewbox, do the same as above but with [0,0] as [x0,y0]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L25. \nLastly, if the zoom behavior is not set on an svg element, use [0,0] for [x0,y0] again but use the width and height of the element itself at [x1,y1]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L27.",
      "unknownAccessPathQuestion": "Is this a call of the zoom.size method from the d3 package?"
    },
    "semanticPatchId": "1925",
    "breakingChangeId": "739",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1925",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-10-30T08:18:32.000Z",
      "detectionPattern": "call <d3>.behavior.zoom()**.size [1,1]",
      "suggestedFixDescription": "The zoom.size([width, height]) method has been renamed to zoom.extent([[x0,y0],[x1,y1]]). \nYou should change the name and then depending on what svg selection/element this zoom behavior is associated with you have to change the argument accordingly.\nIf the svg selection has a parent element with a viewbox (selection.ownerSVGElement.hasAttribute(\"viewBox\")) you should use the parents upper corner as the [x0,y0] coordinate and the width and height of the parent element as [x1,y1]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L21-L23. \nIf the svg selection has a parent, but this parent has no viewbox, do the same as above but with [0,0] as [x0,y0]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L25. \nLastly, if the zoom behavior is not set on an svg element, use [0,0] for [x0,y0] again but use the width and height of the element itself at [x1,y1]. See: https://github.com/d3/d3-zoom/blob/main/src/zoom.js#L27.",
      "unknownAccessPathQuestion": "Is this a call of the zoom.size method from the d3 package?"
    },
    "semanticPatchId": "1925",
    "breakingChangeId": "739",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial ",
      "detectionPattern": "call <d3>.behavior.zoom()**.on",
      "suggestedFixDescription": "This is only breaking if you are registering listeners for either the zoomstart or zoomend event type. As a start you should remove “zoom” from $1, making it just “start” or “end”.\nThis change does have the potential to bring other errors with it, since there are a lot of different ways to access the name of the last event being fired, say for instance with `d3.event.type`",
      "unknownAccessPathQuestion": "is this a call of the zoom.on method from the d3 package?"
    },
    "semanticPatchId": "1926",
    "breakingChangeId": "740",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "1926",
      "comment": "Initial",
      "version": 0,
      "creationDate": "2022-10-30T08:33:50.000Z",
      "detectionPattern": "call <d3>.behavior.zoom()**.on",
      "suggestedFixDescription": "This is only breaking if you are registering listeners for either the zoomstart or zoomend event type. \nAs a start you should remove “zoom” from $1, making it just “start” or “end”.\nThis change does have the potential to bring other errors with it, since there are a lot of different ways to access the name of the last event being fired, say for instance with `d3.event.type`",
      "unknownAccessPathQuestion": "is this a call of the zoom.on method from the d3 package?"
    },
    "semanticPatchId": "1926",
    "breakingChangeId": "740",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"sin-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2201",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"sin-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2202",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"sin-out-in\",\"sin-in-out\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2203",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"sin-out-in\",\"sin-in-out\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2204",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"cubic-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2205",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackOut.overshoot($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-out\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2177",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-in-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2178",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackInOut.overshoot($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-in-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2179",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "initial"
  },
  {
    "version": 3,
    "semanticPatch": {
      "id": "1735",
      "comment": "Made a transformation for this",
      "enabled": true,
      "version": 2,
      "creationDate": "2022-10-04T04:00:30.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out-in\" [1,1]",
      "suggestedFixDescription": "Instead of using $base($1,...), you would now have to use $base._typeOfEase(), where you find the _typeOfEase corresponding to $1 on this list: https://github.com/d3/d3/blob/main/CHANGES.md#easings-d3-ease. As an example, if you had `d3.ease(“linear”);` this would now become `d3.easeLinear();` where _typeOfEasy = easeLinear.",
      "unknownAccessPathQuestion": "Is this a call of the ease method from the d3 package?"
    },
    "semanticPatchId": "1735",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Made a transformation for this"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this the call of the .ease method from d3?"
    },
    "semanticPatchId": "2157",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out-in\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the .ease method from d3?"
    },
    "semanticPatchId": "2158",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2).period($3).easeBackIn($4)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out-in\" [4,4]",
      "unknownAccessPathQuestion": "Is this a call of the .ease method from d3?"
    },
    "semanticPatchId": "2159",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>. elastic-in",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of the ease method from d3?"
    },
    "semanticPatchId": "2160",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>. elastic-in.amplitude($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2161",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>. elastic-in.amplitude($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2162",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>. elastic-in.amplitude($2).period($3).easeBackIn($4)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in\" [4,4]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2163",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2164",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticIn.amplitude($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of the d3.ease method?"
    },
    "semanticPatchId": "2165",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "call <d3>.ease 0:\"elastic-out\" [4,4]",
        "replacements": []
      },
      "detectionPattern": "call <d3>.easeElasticIn.amplitude($2).period($3)",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2166",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2166",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-11-24T06:01:25.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticIn.amplitude($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2166",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticIn.amplitude($2).period($3).easeBackIn($4)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-out\" [4,4]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2167",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2168",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2169",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in-out\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of the d3.ease?"
    },
    "semanticPatchId": "2170",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeElasticInOut.amplitude($2).period($3).easeBackIn($4)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"elastic-in-out\" [4,4]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2171",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2172",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackIn.overshoot($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2173",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackIn.overshoot($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-in\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2174",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2175",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackOut.overshoot($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"back-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2176",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2178",
      "comment": "Initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-11-24T06:19:10.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"back-in-out\",\"elastic-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2178",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2179",
      "comment": "initial ",
      "enabled": true,
      "version": 0,
      "creationDate": "2022-11-24T06:20:03.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackInOut.overshoot($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"back-in-out\",\"back-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2179",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBackInOut.overshoot($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"back-out-in\",\"back-in-out\"} [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2180",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"bounce-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2181",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"bounce-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2182",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"bounce-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2183",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"bounce-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2184",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"bounce-in-out\",\"bounce-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2185",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeBounceInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"bounce-in-out\",\"bounce-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2186",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"circle-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2187",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Intiial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"circle-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this  call of d3.ease?"
    },
    "semanticPatchId": "2188",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Intiial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"circle-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2189",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"circle-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2190",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"circle-in-out\",\"circle-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2191",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"circle-in-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2192",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2192",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-11-24T06:38:52.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easeCircleInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"circle-in-out\",\"circle-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2192",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"exp-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2193",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"exp-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2194",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"exp-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2195",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"exp-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2196",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"exp-out-in\",\"exp-in-out\"} [1,1]",
      "unknownAccessPathQuestion": "is this a call of d3.ease?"
    },
    "semanticPatchId": "2197",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeExpInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"exp-out-in\",\"exp-in-out\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2198",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"sin-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2199",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeSinIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"sin-in\" [2,2]",
      "unknownAccessPathQuestion": "is this a call of d3.ease?"
    },
    "semanticPatchId": "2200",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"cubic-in\" [2,2]",
      "unknownAccessPathQuestion": "is this a call of d3.ease?"
    },
    "semanticPatchId": "2206",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"cubic-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2207",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"cubic-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2208",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"cubic-in-out\",\"cubic-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2209",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeCubicInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"cubic-in-out\",\"cubic-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2210",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"quad-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2211",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadIn.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"quad-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2212",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"quad-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2213",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"quad-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2214",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"quad-out-in\",\"quad-in-out\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2215",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeQuadInOut.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"quad-out-in\",\"quad-in-out\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2216",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyIn",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-in\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2217",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyIn.exponent($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-in\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2218",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyIn.exponent($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-in\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease"
    },
    "semanticPatchId": "2219",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-out\" [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2220",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyOut.exponent($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-out\" [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2221",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyOut.exponent($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-out\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2222",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyInOut",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"poly-in-out\",\"poly-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2223",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyInOut.exponent($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"poly-in-out\",\"poly-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "is this a call of d3.ease?"
    },
    "semanticPatchId": "2224",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyInOut.exponent($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:\"poly-in-out\" [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2225",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 1,
    "semanticPatch": {
      "id": "2225",
      "comment": "Initial ",
      "version": 0,
      "creationDate": "2022-11-24T07:16:08.000Z",
      "primaryTemplate": {
        "pattern": "<d3>.easePolyInOut.exponent($2).period($3)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"poly-in-out\",\"poly-out-in\"} [3,3]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2225",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial "
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeLinear",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"linear\",\"linear-in\",\"linear-out\",\"linear-in-out\",\"linear-out-in\"} [1,1]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2226",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  },
  {
    "version": 0,
    "semanticPatch": {
      "comment": "Initial",
      "primaryTemplate": {
        "pattern": "<d3>.easeLinear.period($2)",
        "replacements": []
      },
      "detectionPattern": "call <d3>.ease 0:{\"linear\",\"linear-in\",\"linear-out\",\"linear-in-out\",\"linear-out-in\"} [2,2]",
      "unknownAccessPathQuestion": "Is this a call of d3.ease?"
    },
    "semanticPatchId": "2227",
    "breakingChangeId": "614",
    "enabled": true,
    "comment": "Initial"
  }
]