[
  {
    "id": "309",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "now race should be finished if any of effects resolved with END (by analogy with all)\n",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "315",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "errors thrown during cancellation process are no longer swallowed, you need to keep finally blocks fail-safe",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "285",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "eventChannel does no longer accept matcher argument",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "275",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "{effects, utils} aren't imported from 'redux-saga' anymore. imports them from redux-saga/effects, redux-saga/utils",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "286",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "removing execution of an array of effects yield [...]. use all effect instead. yield [...] becomes yield all(...[...]).",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "277",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "delay became an effect, old delay function (not effect!) can be imported from @redux-saga/delay-p",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "279",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "removed some deprecated APIs - takeEvery, takeLatest, throttle from the redux-saga entry point (they are and were importable from redux-saga/effects). put.sync and takem were removed.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "280",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "put.resolve was changed to putResolve",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "281",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "channel and actionChannel have default buffer of buffers.expanding()",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "282",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "exported util of arrayOfDeffered got renamed to the correct arrayOfDeferred",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "283",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "createMockTask, cloneableGenerator should be imported from @redux-saga/testing-utils",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "287",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "take.maybe was changed to takeMaybe",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "288",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "task.done getter was changed to be task.toPromise method",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "289",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "is helper should be imported from @redux-saga/is.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "276",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "errors thrown during put execution are no longer caught and swallowed, you need to catch them manually",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "290",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "changed API of runSaga - it no longer accepts subscribe option, you should create a channel (preferably stdChannel), pass it as channel argument to the runSaga API and communicate with through it with take and put methods",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "293",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "channels private getters (takers and closed) got removed",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "310",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "onError doesn't extend error with additional field sagaStack, but pass it as a property of second argument. before: onError: (e: Error), after: onError(e: Error, { sagaStack })",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "320",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "we have stopped interpreting effects returned from fork, this shouldn't affect any real-life code, affected patterns look like this fork(() => effectCreator()) and fork(takeEvery, 'type', fn)",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "321",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "detach helper returns a new effect instead of mutating the input one",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "322",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "Effect shape, yielded to redux-saga middleware, is stabilized and declared now as a plain JavaScript object.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "278",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "Cancel and join cannot receive variadic arguments anymore. so you have to rewrite cancel(...[tasks]) and join(...[tasks]) to cancel([tasks]) and join([tasks]) respectively. ",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "373",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "Calling cancel(...) returns a cancel-effect when cancel is called with multiple task arguments (before it would return an all effect)",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": true
  },
  {
    "id": "316",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "refactor effect structure from {[IO]: true, [type]: payload } to { [IO]: true, type, payload } to get rid of dynamic type property. Could affect you if implement custom monitors for saga effects.",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  },
  {
    "id": "318",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "removed logError, use only onError option (it's signature is onError(error, { sagaStack }))",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": false,
    "unlikelyBreakingChange": false
  },
  {
    "id": "319",
    "packageVersion": "1.0.0",
    "packageName": "redux-saga",
    "description": "TS typings got revamped - redux-saga now requires TypeScript to be at least version 3.1",
    "deprecation": false,
    "askBeforePatch": false,
    "unknownPatchLocation": false,
    "affectsAllClients": true,
    "unlikelyBreakingChange": false
  }
]