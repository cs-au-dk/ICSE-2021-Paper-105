[
  {
    "pattern": "import rxjs/**/*observable/dom/{WebSocket,WebSocketSubject}{,*,/**/*}",
    "transform": {
      "pattern": "<rxjs/websocket>.#3"
    },
    "id": "1",
    "changelogDescription": "webSocket: webSocket creator function now exported from rxjs/websocket as websocket.",
    "changelogId": "1"
  },
  {
    "pattern": "import rxjs/**/*util/{isArray,applyMixins,ArgumentOutOfRangeError,EmptyError,errorObject,identity,Immediate,isDate,isNumeric,isObject,isFunction,isPromise,isScheduler,noop,not,ObjectUnsubscribedError,pipe,root,SubscribeToResult,TimeoutError,toSubscriber,tryCatch,UnsubscriptionError}{,*,/**/*}",
    "transform": {
      "status": "NO_GENERAL_PATCH",
      "comment": "We can insert the implementation of the functions but that is probably not what the library developer would do"
    },
    "id": "3",
    "changelogDescription": "utils: Many internal use utilities like isArray are now hidden under rxjs/internal, they are implementation details and should not be used.",
    "changelogId": "2"
  },
  {
    "pattern": "import rxjs/**/*testing/{HotObservable,ColdObservable}{,*,/**/*}",
    "transform": {
      "status": "NO_GENERAL_PATCH",
      "comment": "They are only internal to rxjs now"
    },
    "id": "4",
    "changelogDescription": "testing observables: HotObservable and ColdObservable, and other testing support types are no longer exported directly.",
    "changelogId": "3"
  },
  {
    "pattern": "read <rxjs{,/**/*}>.Observable.{from,fromPromise,of,combineLatest,fromEvent,timer,interval,merge,bindCallback,bindNodeCallback,empty,if,throw,defer,concat,combineAll,concatAll,endWith,forkJoin,mergeAll,pairwise,race,startWith,withLatestFrom,zip,ajax,generate,range}",
    "uncertainAccPathQuestion": "Is the receiver rxjs.Observable?",
    "transform": {
      "pattern": "<rxjs>.$prop[fromPromise => from, throw => throwError]"
    },
    "id": "5a",
    "changelogDescription": "creation functions: All create functions such as of, from, combineLatest and fromEvent should now be imported from rxjs/create.",
    "changelogId": "4"
  },
  {
    "pattern": "import rxjs/observable/{from,fromPromise,of,combineLatest,fromEvent,timer,interval,merge,bindCallback,bindNodeCallback,empty,if,throw,defer,concat,combineAll,concatAll,endWith,forkJoin,mergeAll,pairwise,race,startWith,withLatestFrom,zip,ajax,generate,range}",
    "transform": {
      "pattern": "rxjs/create/#1"
    },
    "id": "5b",
    "changelogDescription": "creation functions: All create functions such as of, from, combineLatest and fromEvent should now be imported from rxjs/create.",
    "changelogId": "4"
  },
  {
    "pattern": "import rxjs/symbol/*",
    "transform": {
      "pattern": "",
      "comment": "We just want to delete this import"
    },
    "id": "7a",
    "changelogDescription": "symbols: Symbols are no longer exported directly from modules such as rxjs/symbol/observable please use Symbol.observable and Symbol.iterator (polyfills may be required)",
    "changelogId": "5"
  },
  {
    "pattern": "read <rxjs/symbol/*>.$$observable",
    "uncertainAccPathQuestion": "Is the receiver from rxjs/symbol?",
    "transform": {
      "pattern": "Symbol.$prop[$$observable => observable]",
      "comment": "There are probably more transformations we want to support here"
    },
    "id": "7b",
    "changelogDescription": "symbols: Symbols are no longer exported directly from modules such as rxjs/symbol/observable please use Symbol.observable and Symbol.iterator (polyfills may be required)",
    "changelogId": "5"
  },
  {
    "pattern": "import rxjs/{Observable,Subject,ReplaySubject,BehaviorSubject,Subscription,Subscriber}",
    "transform": {
      "pattern": "rxjs"
    },
    "id": "8",
    "changelogDescription": "deep imports: Can no longer deep import top-level types such as rxjs/Observable, rxjs/Subject, rxjs/ReplaySubject, et al. All imports should be done directly from rxjs, for example: import \\{ Observable, Subject \\} from 'rxjs';",
    "changelogId": "6"
  },
  {
    "pattern": "read <rxjs>.Scheduler.{async,virtualTime,animationFrame,asap,queue}",
    "uncertainAccPathQuestion": "Is the receiver rxjs.Scheduler?",
    "transform": {
      "pattern": "<rxjs>.$propScheduler"
    },
    "id": "9",
    "changelogDescription": "schedulers: Scheduler instances have changed names to be suffixed with Scheduler, (e.g. asap -> asapScheduler)",
    "changelogId": "7"
  },
  {
    "pattern": "import rxjs/operator/{audit,combineAll,debounceTime,do,findIndex,map,mergeScan,publishBehavior,retry,single,switchMap,timeInterval,windowTime,auditTime,combineLatest,defaultIfEmpty,elementAt,find,mapTo,min,publish,retryWhen,skip,switchMapTo,timeout,windowToggle,bufferCount,concatAll,delay,every,first,materialize,multicast,publishLast,sample,skipLast,take,timeoutWith,windowWhen,buffer,concat,delayWhen,exhaust,groupBy,max,observeOn,publishReplay,sampleTime,skipUntil,takeLast,timestamp,withLatestFrom,bufferTime,concatMap,dematerialize,exhaustMap,ignoreElements,mergeAll,onErrorResumeNext,race,scan,skipWhile,takeUntil,toArray,zipAll,bufferToggle,concatMapTo,distinct,expand,isEmpty,merge,pairwise,reduce,sequenceEqual,startWith,takeWhile,toPromise,zip,bufferWhen,count,distinctUntilChanged,filter,last,mergeMap,partition,repeat,share,subscribeOn,throttle,windowCount,catch,debounce,distinctUntilKeyChanged,finally,let,mergeMapTo,pluck,repeatWhen,shareReplay,switch,throttleTime,window}",
    "transform": {
      "pattern": "<rxjs/operators>.#1"
    },
    "id": "10",
    "changelogDescription": "operators: Pipeable operators must now be imported from rxjs like so: import { map, filter, switchMap } from 'rxjs/operators';. No deep imports.",
    "changelogId": "8"
  },
  {
    "pattern": "import rxjs/**/*observable/dom/ajax",
    "transform": {
      "pattern": "rxjs/ajax"
    },
    "id": "11",
    "changelogDescription": "ajax: Ajax observable should be imported from rxjs/ajax.",
    "changelogId": "9"
  },
  {
    "pattern": "import rxjs/**/observable/EmptyObservable",
    "transform": {
      "pattern": ""
    },
    "id": "12",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "call <rxjs{,/**/*}>.EmptyObservable.create",
    "uncertainAccPathQuestion": "Is the receiver EmptyObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.EMPTY"
    },
    "id": "12a",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "import rxjs/**/observable/{ArrayLikeObservable,BoundNodeCallbackObservable,DeferObservable,ForkJoinObservable,RangeObservable,TimerObservable,ArrayObservable,FromObservable,IfObservable,PairsObservable,ScalarObservable,FromEventObservable,NeverObservable,PromiseObservable,SubscribeOnObservable,UsingObservable,ConnectableObservable,ErrorObservable,IntervalObservable,BoundCallbackObservable,FromEventPatternObservable,GenerateObservable,IteratorObservable}",
    "transform": {
      "pattern": ""
    },
    "id": "12b",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/{ArrayLikeObservable,FromObservable,IteratorObservable,PromiseObservable}>.create",
    "uncertainAccPathQuestion": "Is the receiver one of ArrayLikeObservable, FromObservable, IteratorObservable or PromiseObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.from"
    },
    "id": "12c",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/{ArrayObservable,ScalarObservable}>.create",
    "uncertainAccPathQuestion": "Is the receiver ArrayObservable or ScalarObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.of"
    },
    "id": "12d",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/BoundCallbackObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver BoundCallbackObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.bindCallback"
    },
    "id": "12e",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/BoundNodeCallbackObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver BoundNodeCallbackObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.bindNodeCallback"
    },
    "id": "12f",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/DeferObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver DeferObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.defer"
    },
    "id": "12g",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/EmptyObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver EmptyObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.empty"
    },
    "id": "12h",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/ErrorObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver ErrorObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.throwError"
    },
    "id": "12i",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/ForkJoinObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver ForkJoinObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.forkJoin"
    },
    "id": "12j",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/FromEventObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver FromEventObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.fromEvent"
    },
    "id": "12k",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/FromEventPatternObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver FromEventPatternObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.fromEventPattern"
    },
    "id": "12l",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/GenerateObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver GenerateObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.generate"
    },
    "id": "12m",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/IfObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver IfObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.iif"
    },
    "id": "12n",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/IntervalObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver IntervalObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.interval"
    },
    "id": "12o",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/NeverObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver NeverObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.never"
    },
    "id": "12p",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/PairsObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver PairsObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.pairs"
    },
    "id": "12q",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/RangeObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver RangeObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.range"
    },
    "id": "12r",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/TimerObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver TimerObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.timer"
    },
    "id": "12s",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/UsingObservable>.create",
    "uncertainAccPathQuestion": "Is the receiver UsingObservable from rxjs?",
    "transform": {
      "pattern": "<rxjs>.using"
    },
    "id": "12t",
    "changelogDescription": "Observable: You should no longer deep import custom Observable implementations such as ArrayObservable or ForkJoinObservable.",
    "changelogId": "10"
  },
  {
    "pattern": "read <rxjs/**/observable/throw>._throw",
    "uncertainAccPathQuestion": "Is the receiver from rxjs?",
    "transform": {
      "pattern": "<rxjs>.throwError"
    },
    "id": "13",
    "changelogDescription": "_throw: _throw is now exported as throwError",
    "changelogId": "11"
  },
  {
    "pattern": "import rxjs/**/if",
    "transform": {
      "pattern": "<rxjs>.iif"
    },
    "id": "14a",
    "changelogDescription": "if: if is now exported as iif",
    "changelogId": "12"
  },
  {
    "pattern": "read <rxjs>.Observable.if",
    "uncertainAccPathQuestion": "Is the receiver rxjs.Observable.if?",
    "transform": {
      "pattern": "<rxjs>.iif"
    },
    "id": "14b",
    "changelogDescription": "if: if is now exported as iif",
    "changelogId": "12"
  },
  {
    "pattern": "import rxjs/operator/{merge,concat,zip,onErrorResumeNext,race}{,/**/*}",
    "transform": {
      "pattern": ""
    },
    "id": "21",
    "changelogDescription": "operators removed: Operator versions of static observable creators such as merge, concat, zip, onErrorResumeNext, and race have been removed. Please use the static versions of those operations. e.g. a.pipe(concat(b, c)) becomes concat(a, b, c).",
    "changelogId": "13"
  },
  {
    "pattern": "call (<rxjs{,/**/*}>?**\\<rxjs{,/**/*}>.Observable).{merge,concat,zip,onErrorResumeNext,race}",
    "uncertainAccPathQuestion": "Is the receiver a rxjs observable?",
    "transform": {
      "pattern": "<rxjs>.$prop($base, $args)"
    },
    "id": "21b",
    "changelogDescription": "operators removed: Operator versions of static observable creators such as merge, concat, zip, onErrorResumeNext, and race have been removed. Please use the static versions of those operations. e.g. a.pipe(concat(b, c)) becomes concat(a, b, c).",
    "changelogId": "13"
  },
  {
    "pattern": "read <Symbol>.observable",
    "uncertainAccPathQuestion": "Is the receiver the builtin Symbol constructor?",
    "question": "Did the user depend on RxJS polyfilling Symbol.observable?",
    "transform": {
      "pattern": "((Symbol && Symbol.observable) || '@@observable')"
    },
    "id": "28",
    "changelogDescription": "Symbol.observable: RxJS will no longer be polyfilling Symbol.observable. That should be done by an actual polyfill library. This is to prevent duplication of code, and also to prevent having modules with side-effects in rxjs.",
    "changelogId": "14"
  },
  {
    "pattern": "import rxjs/Rx",
    "transform": {
      "pattern": "rxjs"
    },
    "id": "31",
    "changelogDescription": "Rx.ts: importing from rxjs/Rx is no longer available. Upcoming backwards compat solution will allow that",
    "changelogId": "15"
  },
  {
    "pattern": "import rxjs/**/never",
    "transform": {
      "pattern": "<rxjs>.never"
    },
    "id": "35",
    "changelogDescription": "never: no longer exported. Use the NEVER constant instead.",
    "changelogId": "16"
  },
  {
    "pattern": "call {<rxjs{,/**/*}>,<rxjs{,/**/*}>.Observable}.ajax 0:string",
    "uncertainAccPathQuestion": "Is the function being called the ajax function from rxjs?",
    "question": "Is the request a CORS request and the crossDomain flag not set?",
    "transform": {
      "pattern": "$callee({ url: $1, crossDomain: true})"
    },
    "id": "43a",
    "changelogDescription": "ajax: will no longer execute a CORS request by default, you must opt-in with the crossDomain flag in the config.",
    "changelogId": "17"
  },
  {
    "pattern": "call {<rxjs{,/**/*}>,<rxjs{,/**/*}>.Observable}.ajax 0:object",
    "uncertainAccPathQuestion": "Is the function being called the ajax function from rxjs?",
    "question": "Is the request a CORS request and the crossDomain flag not set?",
    "transform": {
      "pattern": "$callee(Object.assign({}, $1, {crossDomain: true})"
    },
    "id": "43c",
    "changelogDescription": "ajax: will no longer execute a CORS request by default, you must opt-in with the crossDomain flag in the config.",
    "changelogId": "17"
  },
  {
    "pattern": "call <rxjs/**/operator/ajax{,*,/**/*}> 0:string",
    "uncertainAccPathQuestion": "Is the function being called the ajax function from rxjs?",
    "question": "Is the request a CORS request and the crossDomain flag not set?",
    "transform": {
      "pattern": "$callee({ url: $1, crossDomain: true})"
    },
    "id": "43b",
    "changelogDescription": "ajax: will no longer execute a CORS request by default, you must opt-in with the crossDomain flag in the config.",
    "changelogId": "17"
  },
  {
    "pattern": "call <rxjs/**/operator/ajax{,*,/**/*}> 0:object",
    "uncertainAccPathQuestion": "Is the function being called the ajax function from rxjs?",
    "question": "Is the request a CORS request and the crossDomain flag not set?",
    "transform": {
      "pattern": "$callee(Object.assign({}, $1, {crossDomain: true})"
    },
    "id": "43d",
    "changelogDescription": "ajax: will no longer execute a CORS request by default, you must opt-in with the crossDomain flag in the config.",
    "changelogId": "17"
  },
  {
    "pattern": "call <rxjs/**/observable/dom/{webSocket,WebSocketSubject}{,*,/**/*}> 0:string",
    "uncertainAccPathQuestion": "Is the function being called the webSocket or WebSocketSubject function from rxjs?",
    "transform": {
      "pattern": "$callee({url: $1, serializer: x => x})"
    },
    "id": "59",
    "changelogDescription": "websocket: WebSocketSubject will now JSON serialize all messages sent over it by default, to return to the old behavior, pass a config setting of serializer: x => x like so: websocket({ url, serializer: x => x })",
    "changelogId": "18"
  },
  {
    "pattern": "call <rxjs/**/observable/dom/{webSocket,WebSocketSubject}{,*,/**/*}> 0:object",
    "uncertainAccPathQuestion": "Is the function being called the webSocket or WebSocketSubject function from rxjs?",
    "transform": {
      "pattern": "$callee(Object.assign({}, $1, {serializer: x => x}))"
    },
    "id": "59b",
    "changelogDescription": "websocket: WebSocketSubject will now JSON serialize all messages sent over it by default, to return to the old behavior, pass a config setting of serializer: x => x like so: websocket({ url, serializer: x => x })",
    "changelogId": "18"
  },
  {
    "pattern": "import rxjs/observable/fromPromise",
    "transform": {
      "pattern": "<rxjs>.from"
    },
    "id": "100",
    "changelogDescription": "Removed fromPromise, should use from instead.",
    "changelogId": "19"
  },
  {
    "pattern": "read <rxjs{,/**/*}>.Observable.fromPromise",
    "uncertainAccPathQuestion": "Is the receiver rxjs.Observable.fromPromise?",
    "transform": {
      "pattern": "<rxjs>.from"
    },
    "id": "100b",
    "changelogDescription": "Removed fromPromise, should use from instead.",
    "changelogId": "19"
  },
  {
    "pattern": "importD rxjs{,/Rx}",
    "transform": {
      "pattern": "import * as Rx from 'rxjs'"
    },
    "id": "101",
    "description": "should catch `import Rx form 'rxjs'`",
    "changelogDescription": "Removed default import such that import Rx from 'rxjs'; fails. Instead import * as Rx from 'rxjs'; works",
    "changelogId": "20"
  },
  {
    "pattern": "call (<rxjs{,/**/*}>?**\\<rxjs{,/**/*}/operators>).{flatMap,map,mapTo,filter,take,takeUntil,takeWhile,delay,last,null,do,catch,finally,switch,withLatestFrom,startWith,timeout,defaultIfEmpty,scan,debounceTime,throttleTime,share,mergeMap,retryWhen,timestamp,mergeMapTo,distinctUntilChanged,switchMap,bufferToggle,concatMap,windowWhen,concatAll,first,toArray,isEmpty,mergeAll,groupBy,reduce,buffer}",
    "uncertainAccPathQuestion": "Is the receiver a rxjs observable?",
    "transform": {
      "pattern": "$base.pipe(<rxjs/operators>.$prop($args))",
      "cleanupPattern": {
        "fromPattern": "<rxjs{,/**/*}>?**.pipe().pipe",
        "toPattern": "$base:callee($base:args, $args)"
      }
    },
    "id": "102a",
    "changelogDescription": "Dropping support for chaining operators (use pipe instead)",
    "changelogId": "21"
  },
  {
    "pattern": "import rxjs/add{,/**/*}",
    "transform": {
      "pattern": ""
    },
    "id": "102b",
    "changelogDescription": "Dropping support for chaining operators (use pipe instead)",
    "changelogId": "21"
  },
  {
    "pattern": "read <rxjs{,/**/*}>?**.{do,catch,switch,finally}",
    "uncertainAccPathQuestion": "Is the receiver a rxjs observable?",
    "transform": {
      "pattern": "$base.$prop[do => tap, catch => catchError, switch => switchAll, finally => finalize]"
    },
    "id": "103a",
    "changelogDescription": "Operator renames: do -> tap, catch -> catchError, switch -> switchAll, finally -> finalize, throw -> throwError\n",
    "changelogId": "22"
  },
  {
    "pattern": "import rxjs/**/throw",
    "transform": {
      "pattern": "rxjs/throwError"
    },
    "id": "103b",
    "changelogDescription": "Operator renames: do -> tap, catch -> catchError, switch -> switchAll, finally -> finalize, throw -> throwError\n",
    "changelogId": "22"
  },
  {
    "pattern": "read <rxjs{,/**/*}>.Observable.throw",
    "uncertainAccPathQuestion": "Is the receiver rxjs.Observable.throw?",
    "transform": {
      "pattern": "<rxjs>.throwError"
    },
    "id": "103c",
    "changelogDescription": "Operator renames: do -> tap, catch -> catchError, switch -> switchAll, finally -> finalize, throw -> throwError\n",
    "changelogId": "22"
  },
  {
    "pattern": "importD symbol-observable",
    "transform": {
      "pattern": "const $locName = (Symbol && Symbol.observable) || '@@observable';"
    },
    "id": "104",
    "changelogDescription": "rxjs@6.0.0 is incompatible with the npm package symbol-observable",
    "changelogId": "23"
  }
]
