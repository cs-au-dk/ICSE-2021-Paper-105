[
  {
    "pattern": "write {<async>.{queue,priorityQueue,cargo,cargoQueue},<async/{queue,priorityQueue,cargo,cargoQueue}>}()?.{drain,saturated,unsaturated,empty,error}",
    "id": "3",
    "changelogDescription": "In queue, priorityQueue, cargo and cargoQueue, the \"event\"-style methods, like q.drain and q.saturated are now methods that register a callback, rather than properties you assign a callback to. They are now of the form q.drain(callback). If you do not pass a callback a Promise will be returned for the next occurrence of the event, making them await-able, e.g. await q.drain(). (#1586, #1641)",
    "changelogId": "1"
  },
  {
    "pattern": "read <async>.{during,doDuring}",
    "id": "5a",
    "changelogDescription": "during and doDuring have been removed, and instead whilst, doWhilst, until and doUntil now have asynchronous test functions. (#850, #1557)",
    "changelogId": "2"
  },
  {
    "pattern": "import async/{during,doDuring}",
    "id": "5d",
    "changelogDescription": "during and doDuring have been removed, and instead whilst, doWhilst, until and doUntil now have asynchronous test functions. (#850, #1557)",
    "changelogId": "2"
  },
  {
    "pattern": "call {<async>.{whilst,until,doWhilst,doUntil},<async/{whilst,until,doWhilst,doUntil}>}",
    "id": "5b",
    "changelogDescription": "during and doDuring have been removed, and instead whilst, doWhilst, until and doUntil now have asynchronous test functions. (#850, #1557)",
    "changelogId": "2"
  },
  {
    "pattern": "call {<async>.memoize,<async/memoize>}",
    "question": "Can the function to be memoized throw errors?",
    "id": "7",
    "benign": true,
    "changelogDescription": "memoize no longer memoizes errors (#1465, #1466)",
    "changelogId": "3"
  },
  {
    "pattern": "call {<async>.{applyEach,applyEachSeries},<async/{applyEach,applyEachSeries}>} [2, 99]",
    "id": "8",
    "changelogDescription": "applyEach/applyEachSeries have a simpler interface, to make them more easily type-able. It always returns a function that takes in a single callback argument. If that callback is omitted, a promise is returned, making it awaitable. (#1228, #1640)",
    "changelogId": "4"
  }
]
