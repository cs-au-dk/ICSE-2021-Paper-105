[
  {
    "pattern": "write <mongoose>?**.cursor",
    "id": "17",
    "changelogDescription": "BREAKING CHANGE: always use mongoose aggregation cursor when using .aggregate().cursor() #5941",
    "changelogId": "1"
  },
  {
    "pattern": "call <mongoose>?**.{pre,post} [2, 2] 0:string 1:function",
    "question": "Has the model being compiled yet?",
    "id": "18",
    "changelogDescription": "BREAKING CHANGE: attach query middleware when compiling model #5939",
    "changelogId": "2"
  },
  {
    "pattern": "write <mongoose>?**.passRawResult",
    "question": "Is the object this property is written on passed to a findOneAndUpdate call?",
    "id": "22",
    "changelogDescription": "BREAKING CHANGE: remove passRawResult option for findOneAndUpdate, use rawResult #5869",
    "changelogId": "3"
  },
  {
    "pattern": "call <mongoose>?**.validate 0:function2",
    "id": "23",
    "changelogDescription": "BREAKING CHANGE: implicit async validators (based on number of function args) are removed, return a promise instead #5824",
    "changelogId": "4"
  },
  {
    "pattern": "call <mongoose>?**.mapReduce",
    "id": "25",
    "changelogDescription": "BREAKING CHANGE: mapReduce resolves to an object with 2 keys rather than 2 separate args #5816",
    "changelogId": "5"
  },
  {
    "pattern": "callR <mongoose>.connect",
    "question": "Is it NOT exploited that the result of connect was a MongooseThenable?",
    "id": "26",
    "changelogDescription": "BREAKING CHANGE: mongoose.connect() returns a promise, removed MongooseThenable #5796",
    "changelogId": "6"
  },
  {
    "pattern": "callR <mongoose>.createConnection [1, 3]",
    "question": "Is useMongoClient not enabled and is the return value not used as a Thenable?",
    "id": "26b",
    "changelogDescription": "BREAKING CHANGE: mongoose.connect() returns a promise, removed MongooseThenable #5796",
    "changelogId": "6"
  },
  {
    "pattern": "call <mongoose>?**.stream [0, 1]",
    "id": "27",
    "changelogDescription": "BREAKING CHANGE: query stream removed, use cursor() instead #5795",
    "changelogId": "7"
  },
  {
    "pattern": "call <mongoose>?**.{open,openSet}",
    "id": "28",
    "changelogDescription": "BREAKING CHANGE: connection open() and openSet() removed, use openUri() instead #5795",
    "changelogId": "8"
  },
  {
    "pattern": "write <mongoose>?**.usePushEach",
    "id": "30a",
    "changelogDescription": "BREAKING CHANGE: remove support for $pushAll, remove usePushEach option #5670",
    "changelogId": "9"
  },
  {
    "pattern": "write <mongoose>?**.$pushAll",
    "id": "30b",
    "changelogDescription": "BREAKING CHANGE: remove support for $pushAll, remove usePushEach option #5670",
    "changelogId": "9"
  },
  {
    "pattern": "write <mongoose>?**.saveErrorIfNotFound",
    "question": "Is the object a mongoose schema?",
    "id": "34a",
    "changelogDescription": "BREAKING CHANGE: remove saveErrorIfNotFound, always error out if save() did not update a document #4973",
    "changelogId": "10"
  },
  {
    "pattern": "call <mongoose>?**.save",
    "question": "Is the saveErrorIfNotFound not set to true on the Schema and can save errors occur and is the result used by the code?",
    "id": "34b",
    "benign": true,
    "changelogDescription": "BREAKING CHANGE: remove saveErrorIfNotFound, always error out if save() did not update a document #4973",
    "changelogId": "10"
  },
  {
    "pattern": "call <mongoose>?**.get().get [1, 1] 0:function",
    "id": "35",
    "benign": true,
    "changelogDescription": "BREAKING CHANGE: don't execute getters in reverse order #4835",
    "changelogId": "11"
  },
  {
    "pattern": "call <mongoose>?**.{toObject,toJson} [1, 1]",
    "id": "37",
    "changelogDescription": "BREAKING CHANGE: toObject() and toJSON() option parameter merges with defaults rather than overwriting #4131",
    "changelogId": "12"
  },
  {
    "pattern": "callR <mongoose>?**.{remove,deleteOne,deleteMany}",
    "question": "Is the resolved value of the returned promise used?",
    "id": "39",
    "changelogDescription": "BREAKING CHANGE: deleteX() and remove() promise resolves to the write object result #4013",
    "changelogId": "13"
  },
  {
    "pattern": "call <mongoose>?**.aggregate [1, 99] 0:object",
    "id": "48a",
    "changelogDescription": "BREAKING CHANGE: aggregate() no longer accepts a spread #2716",
    "changelogId": "14"
  }
]
