import commander from 'commander';

import {runTapirAndPatcherInDir} from '../experiments/PatchingExperiment';
import {createLogger} from '../logging';

import {isAbsolute, resolve} from "path";
import {StaticConfiguration} from "../static-configuration";
import {PackageOperations} from "../package/package-operations";
import {promisify as p} from "util";
import rimraf = require("rimraf");

const logger = createLogger('patch-client', 'info');

commander.arguments('<semantic-patches-file> <libraryAndVersion> <patchDir> <resDir>')
    .option('-d, --debug', 'Enable debug logging')
    .option('--exclude-folders <excludeFolders>', 'Comma-separated list of folders to exclude in patching')
    .option('--exclude-files <excludeFiles>', 'Comma-separated list of files to exclude in patching')
    .description(
        'Copies the client in <patchDir> to <resDir> and patches <resDir> with respect to the <semantic-patches-file> and updates to <libraryAndVersion>, but excluding the folders <excludeFolders> and the files <excludeFiles>')
    .action(async function(semanticPatchFile: string, libraryAndVersion: string, patchDir: string, resDir: string, cmdObj: any) {
      if (cmdObj.debug) {
        logger.level = 'debug';
      }
      const excludedFolders = !cmdObj.excludeFolders ? [] : cmdObj.excludeFolders.split(',');
      const excludedFiles = !cmdObj.excludeFiles ? [] : cmdObj.excludeFiles.split(',');

      if (excludedFolders.length > 0 || excludedFiles.length > 0) {
        logger.debug(`excluding folders [${excludedFolders.join(', ')}]`);
        logger.debug(`excluding files [${excludedFiles.join(', ')}]`);
      }
      const patternDescriptionFileAbsolute = isAbsolute(semanticPatchFile) ? semanticPatchFile : resolve(StaticConfiguration.projectHome, semanticPatchFile);
      const patchDirAbsolute = isAbsolute(patchDir) ? patchDir : resolve(StaticConfiguration.projectHome, patchDir);
      const resDirAbsolute = isAbsolute(resDir) ? resDir : resolve(StaticConfiguration.projectHome, resDir);
      console.log("Starting copying client");
      await p(rimraf)(resDirAbsolute);
      await PackageOperations.copyDirectory(patchDirAbsolute, resDirAbsolute);
      console.log("Finishing copying client");
      console.log("Starting running JSFix");
      let patcherResultForClient = await runTapirAndPatcherInDir(resDirAbsolute, patternDescriptionFileAbsolute, excludedFolders, excludedFiles, libraryAndVersion, 'client', true, true, true, resolve(resDirAbsolute, 'autogenerated-patch-questions'));
      patcherResultForClient.patchingsForAllFiles.forEach((resultsForFile, file) =>
        resultsForFile.forEach((matchedWrappers, locString) =>
          matchedWrappers.forEach(pw =>
            console.log(`Patched pattern ${pw.changelogId} at ${file}:${locString}`))));
    });

commander.parse(process.argv);
